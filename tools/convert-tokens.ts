/**
 * Utilized by `build_themes.sh` to convert theme token files to generate the files in `libs/ui/styles/themes`
 */

import { kebabCase } from '@oxide/util'
import type { CSSProperties } from 'react'
import type { Config, TransformedToken } from 'style-dictionary'
import type { KebabCase } from 'type-fest'
import StyleDictionary from 'style-dictionary'

const THEMES = ['main', 'operator-mode'] as const

const FONT_FAMILIES = {
  'GT America Mono': '"GT America Mono", monospace',
  "Suisse Int'l":
    'SuisseIntl, -apple-system, BlinkMacSystemFont, Helvetica, Arial, sans-serif',
}

const hexToRGB = (hexColor: string) => {
  return hexColor.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16))
}

const percentToRem = (value: string) => {
  return parseFloat(value) / 100 + 'rem'
}
const pxToRem = (value: string | number) =>
  parseFloat(value as string) / 16 + 'rem'
const valueToRem = (value: string | number) =>
  typeof value === 'string' && value.includes('%')
    ? percentToRem(value)
    : pxToRem(value)

const formatFontClass = (name: string) => {
  return name
    .replace('-light', '')
    .replace('-regular', '')
    .replace('-book', '-semi')
}

/**
 * The token build process leaves typography styles in object form while it
 * collapses everything else into individual properties. We pass that object
 * to this function to ensure everything is formatted to `rem` units and to remove
 * and properties that we don't really want or need
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const formatTypographyStyles = (name: string, value: any) => {
  // eslint-disable-next-line no-param-reassign
  name = kebabCase(name)
  if (value === 'none') return null
  switch (name) {
    case 'font-family':
      // @ts-expect-error
      return [name, FONT_FAMILIES[value]]
    case 'line-height':
      return value === 'AUTO' ? null : [name, valueToRem(value)]
    case 'font-weight': {
      const weight = value.toLowerCase()
      if (weight.includes('light')) {
        return [name, 300]
      } else if (weight.includes('book')) {
        return [name, 500]
      } else {
        return [name, 400]
      }
    }
    case 'paragraph-spacing':
      return null
    case 'text-case':
      return ['text-transform', value]
    case 'font-size':
    case 'letter-spacing':
      return [name, valueToRem(value)]
    default:
      return [name, value]
  }
}

StyleDictionary.registerFormat({
  name: 'theme',
  formatter({ dictionary, options }) {
    const colors = Object.fromEntries(
      dictionary.allProperties
        .filter((prop) => prop.name.startsWith('base-'))
        .map((prop) => [prop.value, prop.name])
    )
    const themes = Object.fromEntries(
      dictionary.allProperties
        .filter((prop) => prop.name.startsWith('theme-'))
        .map((prop) => [prop.value, prop.name])
    )
    return `
    /* THIS FILE IS AUTOGENERATED, DO NOT EDIT */

    ${options.selector} {
      ${dictionary.allProperties
        .filter((prop) => typeof prop.value !== 'object')
        .sort(({ name }) => (name.startsWith('base-') ? -1 : 1))
        .map((prop) => {
          const color: string = prop.value.slice(0, 7)
          const alpha: string = prop.value.slice(7, 9)
          if (alpha) {
            console.log('alpha:', alpha)
          }
          const rgbColor = hexToRGB(prop.value.slice(1))
          if (!rgbColor) {
            throw new Error(
              `Invalid color for ${prop.name}. Expected a hex value, got '${prop.value}'`
            )
          }
          if (color in colors) {
            if (prop.name.startsWith('base-')) {
              return options.selector === ':root'
                ? `--${prop.name}: ${rgbColor}; /* ${prop.value} */`
                : ''
            }
            if (prop.name.startsWith('theme-')) {
              return `--${prop.name}: var(--${colors[prop.value]});`
            }
            if (alpha) {
              return `--${prop.name}: rgba(var(--${
                themes[color] || colors[color]
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              }), ${hexToRGB(alpha)![0] / 255});`
            }
            return `--${prop.name}: rgb(var(--${
              themes[color] || colors[color]
            }));`
          }
          return `--${prop.name}: ${alpha ? 'rgba' : 'rgb'}(${rgbColor});`
        })
        .join('\n')}
    }\n`
  },
})

type CSSProperty = KebabCase<keyof CSSProperties> | `--${string}`
/**
 * A helper used by the tailwind formatter, it generates custom tailwind utilities for color styles
 *
 * @param tokenPrefix  The prefix of the color token name to be targeted / replaced
 * @param classPrefix  What will ultimately be prepended to the tailwind class
 * @param cssProperties  The css property name to be output in the generated class
 */
const makeColorUtility = (
  tokenPrefix: 'surface' | 'content' | 'stroke' | 'chart-fill' | 'chart-stroke',
  classPrefix: string,
  cssProperties: CSSProperty | CSSProperty[]
) => {
  const properties = Array.isArray(cssProperties)
    ? cssProperties
    : [cssProperties]
  return (colors: TransformedToken[]) =>
    colors
      .filter((color) => color.name.startsWith(tokenPrefix))
      .map(
        (color) => `
        '.${color.name.replace(tokenPrefix, classPrefix)}': {
          ${properties.map((prop) => `'${prop}': 'var(--${color.name})'`)}
        }`
      )
}

StyleDictionary.registerFormat({
  name: 'tailwind',
  formatter({ dictionary }) {
    const typeStyles = dictionary.allProperties.filter(
      (prop) => prop.type === 'typography'
    )
    const colors = dictionary.allProperties.filter(
      (prop) => prop.type === 'color' && !prop.name.startsWith('base')
    )
    return `
      /* THIS FILE IS AUTOGENERATED, DO NOT EDIT */

      module.exports.textUtilities = {
        ${typeStyles.map(
          (prop) => `
          '.text-${formatFontClass(prop.name)}': {
            ${Object.entries(prop.value)
              .map(([name, value]) => formatTypographyStyles(name, value))
              .filter((style) => style !== null)
              // @ts-expect-error null is filtered despite showing up in the types
              .map(([name, value]) => `'${name}': ${JSON.stringify(value)},`)
              .join('\n')}
          }`
        )}
      }

      module.exports.colorUtilities = {
        ${[
          makeColorUtility('content', 'text', 'color'),
          makeColorUtility('surface', 'bg', 'background-color'),
          makeColorUtility('stroke', 'border', 'border-color'),
          makeColorUtility('stroke', 'border-l', 'border-left-color'),
          makeColorUtility('stroke', 'border-r', 'border-right-color'),
          makeColorUtility('stroke', 'border-t', 'border-top-color'),
          makeColorUtility('stroke', 'border-b', 'border-bottom-color'),
          makeColorUtility('stroke', 'border-x', [
            'border-left-color',
            'border-right-color',
          ]),
          makeColorUtility('stroke', 'border-y', [
            'border-top-color',
            'border-bottom-color',
          ]),
          makeColorUtility('stroke', 'ring', '--tw-ring-color'),
          makeColorUtility('stroke', 'outline', 'outline-color'),
          makeColorUtility('chart-fill', 'chart-fill', 'fill'),
          makeColorUtility('chart-stroke', 'chart-stroke', 'stroke'),
        ].map((make) => make(colors))}
      }
    `
  },
})

/**
 * Anything we're not actively using in the theme files or tailwind config should be filtered out
 *
 * If an asterisk appears in the token path that style will be filtered out here which gives us the ability
 * to explicitly filter things out directly from the token file
 */
StyleDictionary.registerFilter({
  name: 'unused-theme-tokens',
  matcher: (prop) => {
    return (
      ![
        'fontFamilies',
        'fontWeights',
        'fontSizes',
        'letterSpacing',
        'paragraphSpacing',
        'textCase',
        'textDecoration',
        'lineHeights',
        'borderRadius',
      ].includes(prop.original.type) &&
      !prop.path.some((i) => i.includes('*')) &&
      !prop.name.endsWith('-uncased')
    )
  },
})

StyleDictionary.registerTransform({
  name: 'remove-default',
  type: 'name',
  transformer(token) {
    return token.name.replace(/(\w+-\w+)-default/, '$1')
  },
})

const makeConfig = (theme: typeof THEMES[number]) => {
  const config: Config = {
    source: [`libs/ui/styles/.tokens/${theme}.json`],
    platforms: {
      web: {
        transforms: ['attribute/cti', 'name/cti/kebab', 'remove-default'],
        buildPath: 'libs/ui/styles/themes/',
        files: [
          {
            filter: 'unused-theme-tokens',
            destination: `${theme}.css`,
            format: 'theme',
            options: {
              selector: theme === 'main' ? ':root' : `.${theme}-theme`,
            },
          },
        ],
      },
    },
  }

  if (theme === 'main') {
    config.platforms.web.files?.push({
      filter: 'unused-theme-tokens',
      destination: `tailwind-tokens.js`,
      format: 'tailwind',
    })
  }

  return config
}

THEMES.forEach((theme) => {
  const sd = StyleDictionary.extend(makeConfig(theme))
  sd.buildAllPlatforms()
})
