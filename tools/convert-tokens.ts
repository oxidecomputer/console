import { kebabCase } from '@oxide/util'
import type { CSSProperties } from 'react'
import type { Config, TransformedToken } from 'style-dictionary'
import type { KebabCase } from 'type-fest'
import StyleDictionary from 'style-dictionary'

const THEMES = ['main', 'operator-mode']

const FONT_FAMILIES = {
  'GT America Mono': '"GT America Mono", monospace',
  "Suisse Int'l":
    'SuisseIntl, -apple-system, BlinkMacSystemFont, Helvetica, Arial, sans-serif',
}

const percentToRem = (value: string) => {
  return parseFloat(value) / 100 + 'rem'
}
const pxToRem = (value: string | number) =>
  parseFloat(value as string) / 16 + 'rem'
const valueToRem = (value: string | number) =>
  typeof value === 'string' && value.includes('%')
    ? percentToRem(value)
    : pxToRem(value)

const formatFontClass = (name: string) => {
  return name
    .replace('-light', '')
    .replace('-regular', '')
    .replace('-book', '-semi')
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const formatStyle = (name: string, value: any) => {
  // eslint-disable-next-line no-param-reassign
  name = kebabCase(name)
  if (value === 'none') return null
  switch (name) {
    case 'font-family':
      // @ts-expect-error
      return [name, FONT_FAMILIES[value]]
    case 'line-height':
      return value === 'AUTO' ? null : [name, valueToRem(value)]
    case 'font-weight': {
      const weight = value.toLowerCase()
      if (weight.includes('light')) {
        return [name, 300]
      } else if (weight.includes('book')) {
        return [name, 500]
      } else {
        return [name, 400]
      }
    }
    case 'paragraph-spacing':
      return null
    case 'text-case':
      return ['text-transform', value]
    case 'font-size':
    case 'letter-spacing':
      return [name, valueToRem(value)]
    default:
      return [name, value]
  }
}

StyleDictionary.registerFormat({
  name: 'theme',
  formatter({ dictionary, options }) {
    const colors = Object.fromEntries(
      dictionary.allProperties
        .filter((prop) => prop.name.startsWith('base-'))
        .map((prop) => [prop.value, prop.name])
    )
    return `
    /* THIS FILE IS AUTOGENERATED, DO NOT EDIT */

    ${options.selector} {
      ${dictionary.allProperties
        .filter((prop) => typeof prop.value !== 'object')
        .sort(({ name }) => (name.startsWith('base-') ? -1 : 1))
        .map((prop) => {
          if (prop.value in colors && !prop.name.startsWith('base-')) {
            return `--${prop.name}: var(--${colors[prop.value]});`
          }
          return `--${prop.name}: ${prop.value};`
        })
        .join('\n')}
    }\n`
  },
})

const makeColorUtility =
  (
    tokenPrefix: string,
    classPrefix: string,
    cssProperty: KebabCase<keyof CSSProperties> | `--${string}`
  ) =>
  (colors: TransformedToken[]) =>
    colors
      .filter((color) => color.name.startsWith(tokenPrefix))
      .map(
        (color) => `
        '.${color.name.replace(tokenPrefix, classPrefix)}': {
          '${cssProperty}': 'var(--${color.name})',
        }
      `
      )

StyleDictionary.registerFormat({
  name: 'tailwind',
  formatter({ dictionary }) {
    const typeStyles = dictionary.allProperties.filter(
      (prop) => prop.type === 'typography'
    )
    const colors = dictionary.allProperties.filter(
      (prop) => prop.type === 'color' && !prop.name.startsWith('base')
    )
    return `
      /* THIS FILE IS AUTOGENERATED, DO NOT EDIT */

      module.exports.textUtilities = {
        ${typeStyles.map(
          (prop) => `
          '.text-${formatFontClass(prop.name)}': {
            ${Object.entries(prop.value)
              .map(([name, value]) => formatStyle(name, value))
              .filter((style) => style !== null)
              // @ts-expect-error null is filtered despite showing up in the types
              .map(([name, value]) => `'${name}': ${JSON.stringify(value)},`)
              .join('\n')}
          }`
        )}
      }

      module.exports.colorUtilities = {
        ${[
          makeColorUtility('content', 'text', 'color'),
          makeColorUtility('surface', 'bg', 'background-color'),
          makeColorUtility('stroke', 'border', 'border-color'),
          makeColorUtility('stroke', 'ring', '--tw-ring-color'),
        ].map((make) => make(colors))}
      }
    `
  },
})

StyleDictionary.registerFilter({
  name: 'unused-theme-tokens',
  matcher: (prop) => {
    return (
      ![
        'fontFamilies',
        'fontWeights',
        'fontSizes',
        'letterSpacing',
        'paragraphSpacing',
        'textCase',
        'textDecoration',
        'lineHeights',
        'borderRadius',
      ].includes(prop.original.type) && !prop.path.some((i) => i.includes('*'))
    )
  },
})

const makeConfig = (theme: string) => {
  const config: Config = {
    source: [`libs/ui/styles/.tokens/${theme}.json`],
    platforms: {
      web: {
        transforms: ['attribute/cti', 'name/cti/kebab'],
        buildPath: 'libs/ui/styles/themes/',
        files: [
          {
            filter: 'unused-theme-tokens',
            destination: `${theme}.css`,
            format: 'theme',
            options: {
              selector: theme === 'main' ? ':root' : `.${theme}-theme`,
            },
          },
        ],
      },
    },
  }

  if (theme === 'main') {
    config.platforms.web.files?.push({
      destination: `tailwind-tokens.js`,
      format: 'tailwind',
    })
  }

  return config
}

THEMES.map((theme) => {
  const sd = StyleDictionary.extend(makeConfig(theme))
  sd.buildAllPlatforms()
})
