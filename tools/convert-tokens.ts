/**
 * Utilized by `build_themes.sh` to convert theme token files to generate the files in `libs/ui/styles/themes`
 */
import type { CSSProperties } from 'react'
import type { Config, TransformedToken } from 'style-dictionary'
import StyleDictionary from 'style-dictionary'
import dedent from 'ts-dedent'
import type { KebabCase } from 'type-fest'

import { kebabCase } from '@oxide/util'

const THEMES = ['main', 'operator-mode'] as const

const FONT_FAMILIES = {
  'GT America Mono': '"GT America Mono", monospace',
  "Suisse Int'l":
    'SuisseIntl, -apple-system, BlinkMacSystemFont, Helvetica, Arial, sans-serif',
}

const hexToRGB = (hexColor: string) => {
  return hexColor.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || []
}

const percentToRem = (value: string) => {
  return parseFloat(value) / 100 + 'rem'
}
const pxToRem = (value: string | number) => parseFloat(value as string) / 16 + 'rem'
const valueToRem = (value: string | number) =>
  typeof value === 'string' && value.includes('%') ? percentToRem(value) : pxToRem(value)

const formatFontClass = (name: string) => {
  return name.replace('-light', '').replace('-regular', '').replace('-book', '-semi')
}

/**
 * The token build process leaves typography styles in object form while it
 * collapses everything else into individual properties. We pass that object
 * to this function to ensure everything is formatted to `rem` units and to remove
 * and properties that we don't really want or need
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const formatTypographyStyles = (name: string, value: any) => {
  // eslint-disable-next-line no-param-reassign
  name = kebabCase(name)
  if (value === 'none') return null
  switch (name) {
    case 'font-family':
      // @ts-expect-error
      return [name, FONT_FAMILIES[value]]
    case 'line-height':
      return value === 'AUTO' ? null : [name, valueToRem(value)]
    case 'font-weight': {
      const weight = value.toLowerCase()
      if (weight.includes('light')) {
        return [name, 300]
      } else if (weight.includes('book')) {
        return [name, 500]
      } else {
        return [name, 400]
      }
    }
    case 'paragraph-spacing':
      return null
    case 'text-case':
      return ['text-transform', value]
    case 'font-size':
    case 'letter-spacing':
      return [name, valueToRem(value)]
    default:
      return [name, value]
  }
}

StyleDictionary.registerFormat({
  name: 'theme',
  formatter({ dictionary, options }) {
    return dedent`
    /* THIS FILE IS AUTOGENERATED, DO NOT EDIT */

    ${options.selector} {
      ${dictionary.allProperties
        .filter((prop) => typeof prop.value !== 'object' && prop.type === 'color')
        .sort(({ name }) => (name.startsWith('base-') ? -1 : 1))
        .map((prop) => {
          const color: string = prop.value.slice(1, 7)
          const rgbColor = hexToRGB(color)
          const { alpha, hasAlpha } = prop.attributes || {}
          if (!rgbColor) {
            throw new Error(
              `Invalid color for ${prop.name}. Expected a hex value, got '${prop.value}'`
            )
          }
          if (prop.name.startsWith('base-')) {
            return options.selector === ':root'
              ? `--${prop.name}-rgb: ${rgbColor}; /* ${prop.value} */
                 --${prop.name}: rgb(var(--${prop.name}-rgb)); 
                `
              : ''
          }
          if (prop.name.startsWith('theme-')) {
            return `
              --${prop.name}-rgb: var(--${prop.attributes?.ref}-rgb);
              --${prop.name}: rgb(var(--${prop.name}-rgb));
            `
          }
          if (hasAlpha && prop.attributes?.ref) {
            return `--${prop.name}: rgba(var(--${prop.attributes?.ref}-rgb), ${alpha});`
          }
          if (prop.attributes?.ref) {
            return `
              --${prop.name}-rgb: var(--${prop.attributes?.ref}-rgb);
              --${prop.name}: rgb(var(--${prop.name}-rgb));
            `
          }
          if (hasAlpha) {
            return `--${prop.name}: rgba(${rgbColor}-rgb, ${alpha});`
          }
          return `
            --${prop.name}-rgb: ${rgbColor};
            --${prop.name}: rgb(var(--${prop.name}-rgb));
          `
        })
        .join('\n')}

      ${dictionary.allProperties
        .filter((prop) => prop.type === 'borderRadius')
        .map((prop) => {
          return `--${prop.name}: ${prop.value};`
        })
        .join('\n')}
    }\n`
  },
})

type CSSProperty = KebabCase<keyof CSSProperties> | `--${string}`
/**
 * A helper used by the tailwind formatter, it generates custom tailwind utilities for color styles
 *
 * @param tokenPrefix  The prefix of the color token name to be targeted / replaced
 * @param classPrefix  What will ultimately be prepended to the tailwind class
 * @param cssProperties  The css property name to be output in the generated class
 */
const makeColorUtility = (
  tokenPrefix: 'surface' | 'content' | 'stroke' | 'chart-fill' | 'chart-stroke',
  classPrefix: string,
  cssProperties: CSSProperty | CSSProperty[]
) => {
  const properties = Array.isArray(cssProperties) ? cssProperties : [cssProperties]
  return (colors: TransformedToken[]) =>
    colors
      .filter((color) => color.name.startsWith(tokenPrefix))
      .map(
        (color) => `
        '${
          (color.original.description &&
            // FIXME: Remove replace once https://github.com/tailwindlabs/tailwindcss/issues/7420 is fixed
            `/* ${color.original.description.trim()} */ \\n`.replace(/,/g, ';')) ||
          ''
        }.${color.name.replace(tokenPrefix, classPrefix)}': {
          ${properties.map((prop) => `'${prop}': 'var(--${color.name})'`)}
        }`
      )
}

StyleDictionary.registerFormat({
  name: 'tailwind',
  formatter({ dictionary }) {
    const typeStyles = dictionary.allProperties.filter((prop) => prop.type === 'typography')
    const colors = dictionary.allProperties.filter(
      (prop) => prop.type === 'color' && !prop.name.startsWith('base')
    )
    const borderRadius = dictionary.allProperties.filter(
      (prop) => prop.type === 'borderRadius'
    )
    return `
      /* THIS FILE IS AUTOGENERATED, DO NOT EDIT */

      module.exports.textUtilities = {
        ${typeStyles.map(
          (prop) => `
          '.text-${formatFontClass(prop.name)}': {
            ${Object.entries(prop.value)
              .map(([name, value]) => formatTypographyStyles(name, value))
              .filter((style) => style !== null)
              // @ts-expect-error null is filtered despite showing up in the types
              .map(([name, value]) => `'${name}': ${JSON.stringify(value)},`)
              .join('\n')}
          }`
        )}
      }

      module.exports.colorUtilities = {
        ${[
          makeColorUtility('content', 'text', 'color'),
          makeColorUtility('surface', 'bg', 'background-color'),
          makeColorUtility('stroke', 'border', 'border-color'),
          makeColorUtility('stroke', 'border-l', 'border-left-color'),
          makeColorUtility('stroke', 'border-r', 'border-right-color'),
          makeColorUtility('stroke', 'border-t', 'border-top-color'),
          makeColorUtility('stroke', 'border-b', 'border-bottom-color'),
          makeColorUtility('stroke', 'border-x', [
            'border-left-color',
            'border-right-color',
          ]),
          makeColorUtility('stroke', 'border-y', [
            'border-top-color',
            'border-bottom-color',
          ]),
          makeColorUtility('stroke', 'ring', '--tw-ring-color'),
          makeColorUtility('stroke', 'outline', 'outline-color'),
          makeColorUtility('chart-fill', 'chart-fill', 'fill'),
          makeColorUtility('chart-stroke', 'chart-stroke', 'stroke'),
        ].map((make) => make(colors))}
      }

      module.exports.borderRadiusTokens = {
        ${borderRadius
          .map(
            ({ name }) =>
              `'${name.replace(/border-radius-?/, '') || 'DEFAULT'}': 'var(--${name})'`
          )
          .join(',')}
      }
    `
  },
})

type ColorGroup = { [colorValue: string]: TransformedToken[] }
StyleDictionary.registerFormat({
  name: 'mermaid',
  formatter({ dictionary, options }) {
    const { name } = options
    const colors = dictionary.allProperties
      .filter((prop) => prop.type === 'color')
      .sort(({ name }) => (name.startsWith('base-') ? -1 : 1))
    const baseColors = colors.filter(({ name }) => name.startsWith('base-')).reverse()
    const colorGroups = colors.reduce<ColorGroup>((all, current) => {
      const currentGroup = all[current.value] ?? []
      currentGroup.push(current)
      all[current.value] = currentGroup
      return all
    }, {})

    return dedent`
    # \`${name}\` Theme

    This document shows the relationship of colors within the \`${name}\` theme. 

    ${baseColors
      .map((groupColor) => {
        return dedent`
        ## ${groupColor.name}
        \`\`\`mermaid
        graph RL
        ${colorGroups[groupColor.value]
          .map(
            (color) =>
              `  ${color.name} --> ${
                color.attributes?.ref ?? `${color.original.rawValue}:::${groupColor.name}`
              }`
          )
          .join('\n')}

          classDef ${groupColor.name} stroke-width:5,stroke:${groupColor.value}
        \`\`\`
      `
      })
      .join('\n')}
    `
  },
})

/**
 * Anything we're not actively using in the theme files or tailwind config should be filtered out
 *
 * If an asterisk appears in the token path that style will be filtered out here which gives us the ability
 * to explicitly filter things out directly from the token file
 */
StyleDictionary.registerFilter({
  name: 'unused-theme-tokens',
  matcher: (prop) => {
    return (
      ![
        'fontFamilies',
        'fontWeights',
        'fontSizes',
        'letterSpacing',
        'paragraphSpacing',
        'textCase',
        'textDecoration',
        'lineHeights',
      ].includes(prop.original.type) &&
      !prop.path.some((i) => i.includes('*')) &&
      !prop.name.endsWith('-uncased')
    )
  },
})

StyleDictionary.registerTransform({
  name: 'name/strip-default',
  type: 'name',
  transformer(token) {
    return token.name.replace(/(\w+-\w+)-default/, '$1')
  },
})

StyleDictionary.registerTransform({
  name: 'name/size-convert',
  type: 'name',
  transformer(token) {
    return token.name.replace('large', 'lg').replace('small', 'sm').replace('medium', 'md')
  },
})

StyleDictionary.registerTransform({
  name: 'attribute/reference',
  type: 'attribute',
  matcher: (token) => token.original.type === 'color',
  transformer(token) {
    const ref = token.original.rawValue.match(/{(.+)}/)?.[1]?.replace(/\./g, '-')
    return { ...token.attributes, ref }
  },
})

StyleDictionary.registerTransform({
  name: 'attribute/alpha',
  type: 'attribute',
  matcher: (token) => token.original.type === 'color',
  transformer(token) {
    const alphaText = token.value.slice(7, 9)
    const alpha = alphaText && hexToRGB(alphaText)[0] / 255
    return { ...token.attributes, alpha, hasAlpha: typeof alpha === 'number' }
  },
})

StyleDictionary.registerTransform({
  name: 'pxToRem',
  type: 'value',
  matcher: (token) => ['borderRadius'].includes(token.original.type),
  transformer(token) {
    return `${token.value / 16}rem`
  },
})

const makeConfig = (theme: typeof THEMES[number]) => {
  const config: Config = {
    source: [`libs/ui/styles/.tokens/${theme}.json`],
    platforms: {
      web: {
        transforms: [
          'attribute/cti',
          'name/cti/kebab',
          'name/strip-default',
          'name/size-convert',
          'attribute/reference',
          'attribute/alpha',
          'pxToRem',
        ],
        buildPath: 'libs/ui/styles/themes/',
        files: [
          {
            filter: 'unused-theme-tokens',
            destination: `${theme}.css`,
            format: 'theme',
            options: {
              selector: theme === 'main' ? ':root' : `.${theme}-theme`,
            },
          },
          {
            filter: 'unused-theme-tokens',
            destination: `${theme}.md`,
            format: 'mermaid',
            options: {
              name: theme,
            },
          },
        ],
      },
    },
  }

  if (theme === 'main') {
    config.platforms.web.files?.push({
      filter: 'unused-theme-tokens',
      destination: `tailwind-tokens.js`,
      format: 'tailwind',
    })
  }

  return config
}

THEMES.forEach((theme) => {
  const sd = StyleDictionary.extend(makeConfig(theme))
  sd.buildAllPlatforms()
})
