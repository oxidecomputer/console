diff --git a/node_modules/react-router-dom/dist/index.js b/node_modules/react-router-dom/dist/index.js
index aeec512..b617027 100644
--- a/node_modules/react-router-dom/dist/index.js
+++ b/node_modules/react-router-dom/dist/index.js
@@ -796,6 +796,19 @@ function useScrollRestoration(_temp3) {
   let matches = useMatches();
   let navigation = useNavigation(); // Trigger manual scroll restoration while we're active
 
+  // HACK: Scroll restoration doesn't work out of the box (issue #1155) because
+  // the container that scrolls is the content pane, one of the page-level grid
+  // cells. So instead of scrolling window, we pull that element directly by ID
+  // and use it instead. In the unlikely event it's not there, fall back to
+  // window (and likely do nothing).
+  const getScrollTarget = () => document.querySelector('#content-pane') || window;
+
+  // window has scrollY but normal elements have scrollTop
+  const getScrollY = () => {
+    const el = getScrollTarget();
+    return el ? el.scrollY || el.scrollTop : undefined;
+  }
+
   React.useEffect(() => {
     window.history.scrollRestoration = "manual";
     return () => {
@@ -806,7 +819,7 @@ function useScrollRestoration(_temp3) {
   useBeforeUnload(React.useCallback(() => {
     if (navigation.state === "idle") {
       let key = (getKey ? getKey(location, matches) : null) || location.key;
-      savedScrollPositions[key] = window.scrollY;
+      savedScrollPositions[key] = getScrollY();
     }
 
     sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
@@ -825,7 +838,7 @@ function useScrollRestoration(_temp3) {
   }, [storageKey]); // Enable scroll restoration in the router
 
   React.useLayoutEffect(() => {
-    let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKey);
+    let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => getScrollY(), getKey);
     return () => disableScrollRestoration && disableScrollRestoration();
   }, [router, getKey]); // Restore scrolling when state.restoreScrollPosition changes
 
@@ -837,7 +850,7 @@ function useScrollRestoration(_temp3) {
 
 
     if (typeof restoreScrollPosition === "number") {
-      window.scrollTo(0, restoreScrollPosition);
+      getScrollTarget().scrollTo(0, restoreScrollPosition);
       return;
     } // try to scroll to the hash
 
@@ -856,8 +869,7 @@ function useScrollRestoration(_temp3) {
       return;
     } // otherwise go to the top on new locations
 
-
-    window.scrollTo(0, 0);
+    getScrollTarget().scrollTo(0, 0);
   }, [location, restoreScrollPosition, preventScrollReset]);
 }
 
