diff --git a/node_modules/react-router-dom/dist/index.js b/node_modules/react-router-dom/dist/index.js
index 4af9844..a2cd3b0 100644
--- a/node_modules/react-router-dom/dist/index.js
+++ b/node_modules/react-router-dom/dist/index.js
@@ -875,6 +875,19 @@ function useScrollRestoration(_temp3) {
   let matches = useMatches();
   let navigation = useNavigation(); // Trigger manual scroll restoration while we're active
 
+  // HACK: Scroll restoration doesn't work out of the box (issue #1155) because
+  // the container that scrolls is the content pane, one of the page-level grid
+  // cells. So instead of scrolling window, we pull that element directly by ID
+  // and use it instead. In the unlikely event it's not there, fall back to
+  // window (and likely do nothing).
+  const getScrollTarget = () => document.querySelector('#content-pane') || window;
+
+  // window has scrollY but normal elements have scrollTop
+  const getScrollY = () => {
+    const el = getScrollTarget();
+    return el ? el.scrollY || el.scrollTop : undefined;
+  }
+
   React.useEffect(() => {
     window.history.scrollRestoration = "manual";
     return () => {
@@ -885,7 +898,7 @@ function useScrollRestoration(_temp3) {
   usePageHide(React.useCallback(() => {
     if (navigation.state === "idle") {
       let key = (getKey ? getKey(location, matches) : null) || location.key;
-      savedScrollPositions[key] = window.scrollY;
+      savedScrollPositions[key] = getScrollY();
     }
 
     sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
@@ -907,7 +920,7 @@ function useScrollRestoration(_temp3) {
     // eslint-disable-next-line react-hooks/rules-of-hooks
 
     React.useLayoutEffect(() => {
-      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKey);
+      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => getScrollY(), getKey);
       return () => disableScrollRestoration && disableScrollRestoration();
     }, [router, getKey]); // Restore scrolling when state.restoreScrollPosition changes
     // eslint-disable-next-line react-hooks/rules-of-hooks
@@ -920,7 +933,7 @@ function useScrollRestoration(_temp3) {
 
 
       if (typeof restoreScrollPosition === "number") {
-        window.scrollTo(0, restoreScrollPosition);
+        getScrollTarget().scrollTo(0, restoreScrollPosition);
         return;
       } // try to scroll to the hash
 
@@ -940,7 +953,7 @@ function useScrollRestoration(_temp3) {
       } // otherwise go to the top on new locations
 
 
-      window.scrollTo(0, 0);
+      getScrollTarget().scrollTo(0, 0);
     }, [location, restoreScrollPosition, preventScrollReset]);
   }
 }
