diff --git a/node_modules/tunnel-rat/dist/index.cjs.js b/node_modules/tunnel-rat/dist/index.cjs.js
index 9ff816a..34f2cca 100644
--- a/node_modules/tunnel-rat/dist/index.cjs.js
+++ b/node_modules/tunnel-rat/dist/index.cjs.js
@@ -1,35 +1,78 @@
 'use strict';
 
-var react = require('react');
+var React = require('react');
 var create = require('zustand');
 
 function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }
 
+var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
 var create__default = /*#__PURE__*/_interopDefaultLegacy(create);
 
-function tunnel() {
-  const useStore = create__default["default"](set => ({
-    current: null,
-    set
-  }));
+const useStore = create__default["default"](set => ({
+  tunnels: {},
+  setTunnel: (key, updaterFn) => {
+    set(state => {
+      /** Ensure the tunnel has defaults set */
+      const tunnel = {
+        current: [],
+        version: 0,
+        ...state.tunnels[key]
+      };
+      return {
+        tunnels: { ...state.tunnels,
+          [key]: { ...tunnel,
+            ...updaterFn(tunnel)
+          }
+        }
+      };
+    });
+  }
+}));
+function tunnel(key) {
   return {
     In: ({
       children
     }) => {
-      const set = useStore(state => state.set);
-      react.useLayoutEffect(() => {
-        set({
-          current: children
-        });
-        return () => void set({
-          current: null
-        });
-      }, [children]);
+      const setTunnel = useStore(state => state.setTunnel);
+      const version = useStore(state => {
+        var _state$tunnels$key$ve, _state$tunnels$key;
+
+        return (_state$tunnels$key$ve = (_state$tunnels$key = state.tunnels[key]) == null ? void 0 : _state$tunnels$key.version) != null ? _state$tunnels$key$ve : 0;
+      });
+      /* When this component mounts, we increase the store's version number.
+      This will cause all existing rats to re-render (just like if the Out component
+      were mapping items to a list.) The re-rendering will cause the final 
+      order of rendered components to match what the user is expecting. */
+
+      React.useLayoutEffect(() => {
+        setTunnel(key, state => ({
+          version: state.version + 1
+        }));
+      }, []);
+      /* Any time the children _or_ the store's version number change, insert
+      the specified React children into the list of rats. */
+
+      React.useLayoutEffect(() => {
+        setTunnel(key, ({
+          current
+        }) => ({
+          current: [...current, children]
+        }));
+        return () => setTunnel(key, ({
+          current
+        }) => ({
+          current: current.filter(c => c !== children)
+        }));
+      }, [children, version]);
       return null;
     },
     Out: () => {
-      const current = useStore(state => state.current);
-      return current;
+      const current = useStore(state => {
+        var _state$tunnels$key$cu, _state$tunnels$key2;
+
+        return (_state$tunnels$key$cu = (_state$tunnels$key2 = state.tunnels[key]) == null ? void 0 : _state$tunnels$key2.current) != null ? _state$tunnels$key$cu : [];
+      });
+      return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, current);
     }
   };
 }
diff --git a/node_modules/tunnel-rat/dist/index.d.ts b/node_modules/tunnel-rat/dist/index.d.ts
index 6bdc0c7..f1469bd 100644
--- a/node_modules/tunnel-rat/dist/index.d.ts
+++ b/node_modules/tunnel-rat/dist/index.d.ts
@@ -2,8 +2,8 @@ import React from 'react';
 declare type Props = {
     children: React.ReactNode;
 };
-export default function tunnel(): {
+export default function tunnel(key: string): {
     In: ({ children }: Props) => null;
-    Out: () => React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;
+    Out: () => JSX.Element;
 };
 export {};
diff --git a/node_modules/tunnel-rat/dist/index.js b/node_modules/tunnel-rat/dist/index.js
index a076198..aa611ea 100644
--- a/node_modules/tunnel-rat/dist/index.js
+++ b/node_modules/tunnel-rat/dist/index.js
@@ -1,29 +1,71 @@
-import { useLayoutEffect } from 'react';
+import React, { useLayoutEffect } from 'react';
 import create from 'zustand';
 
-function tunnel() {
-  const useStore = create(set => ({
-    current: null,
-    set
-  }));
+const useStore = create(set => ({
+  tunnels: {},
+  setTunnel: (key, updaterFn) => {
+    set(state => {
+      /** Ensure the tunnel has defaults set */
+      const tunnel = {
+        current: [],
+        version: 0,
+        ...state.tunnels[key]
+      };
+      return {
+        tunnels: { ...state.tunnels,
+          [key]: { ...tunnel,
+            ...updaterFn(tunnel)
+          }
+        }
+      };
+    });
+  }
+}));
+function tunnel(key) {
   return {
     In: ({
       children
     }) => {
-      const set = useStore(state => state.set);
+      const setTunnel = useStore(state => state.setTunnel);
+      const version = useStore(state => {
+        var _state$tunnels$key$ve, _state$tunnels$key;
+
+        return (_state$tunnels$key$ve = (_state$tunnels$key = state.tunnels[key]) == null ? void 0 : _state$tunnels$key.version) != null ? _state$tunnels$key$ve : 0;
+      });
+      /* When this component mounts, we increase the store's version number.
+      This will cause all existing rats to re-render (just like if the Out component
+      were mapping items to a list.) The re-rendering will cause the final 
+      order of rendered components to match what the user is expecting. */
+
       useLayoutEffect(() => {
-        set({
-          current: children
-        });
-        return () => void set({
-          current: null
-        });
-      }, [children]);
+        setTunnel(key, state => ({
+          version: state.version + 1
+        }));
+      }, []);
+      /* Any time the children _or_ the store's version number change, insert
+      the specified React children into the list of rats. */
+
+      useLayoutEffect(() => {
+        setTunnel(key, ({
+          current
+        }) => ({
+          current: [...current, children]
+        }));
+        return () => setTunnel(key, ({
+          current
+        }) => ({
+          current: current.filter(c => c !== children)
+        }));
+      }, [children, version]);
       return null;
     },
     Out: () => {
-      const current = useStore(state => state.current);
-      return current;
+      const current = useStore(state => {
+        var _state$tunnels$key$cu, _state$tunnels$key2;
+
+        return (_state$tunnels$key$cu = (_state$tunnels$key2 = state.tunnels[key]) == null ? void 0 : _state$tunnels$key2.current) != null ? _state$tunnels$key$cu : [];
+      });
+      return /*#__PURE__*/React.createElement(React.Fragment, null, current);
     }
   };
 }
