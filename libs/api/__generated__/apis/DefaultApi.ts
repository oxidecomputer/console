/* tslint:disable */
/* eslint-disable */
/**
 * Oxide Region API
 * API for interacting with the Oxide control plane
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: api@oxide.computer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  Disk,
  DiskFromJSON,
  DiskToJSON,
  DiskAttachment,
  DiskAttachmentFromJSON,
  DiskAttachmentToJSON,
  DiskCreateParams,
  DiskCreateParamsFromJSON,
  DiskCreateParamsToJSON,
  DiskResultsPage,
  DiskResultsPageFromJSON,
  DiskResultsPageToJSON,
  IdSortMode,
  IdSortModeFromJSON,
  IdSortModeToJSON,
  Instance,
  InstanceFromJSON,
  InstanceToJSON,
  InstanceCreateParams,
  InstanceCreateParamsFromJSON,
  InstanceCreateParamsToJSON,
  InstanceResultsPage,
  InstanceResultsPageFromJSON,
  InstanceResultsPageToJSON,
  NameOrIdSortMode,
  NameOrIdSortModeFromJSON,
  NameOrIdSortModeToJSON,
  NameSortMode,
  NameSortModeFromJSON,
  NameSortModeToJSON,
  Organization,
  OrganizationFromJSON,
  OrganizationToJSON,
  OrganizationCreate,
  OrganizationCreateFromJSON,
  OrganizationCreateToJSON,
  OrganizationResultsPage,
  OrganizationResultsPageFromJSON,
  OrganizationResultsPageToJSON,
  OrganizationUpdate,
  OrganizationUpdateFromJSON,
  OrganizationUpdateToJSON,
  Project,
  ProjectFromJSON,
  ProjectToJSON,
  ProjectCreate,
  ProjectCreateFromJSON,
  ProjectCreateToJSON,
  ProjectResultsPage,
  ProjectResultsPageFromJSON,
  ProjectResultsPageToJSON,
  ProjectUpdate,
  ProjectUpdateFromJSON,
  ProjectUpdateToJSON,
  Rack,
  RackFromJSON,
  RackToJSON,
  RackResultsPage,
  RackResultsPageFromJSON,
  RackResultsPageToJSON,
  RouterRoute,
  RouterRouteFromJSON,
  RouterRouteToJSON,
  RouterRouteCreateParams,
  RouterRouteCreateParamsFromJSON,
  RouterRouteCreateParamsToJSON,
  RouterRouteResultsPage,
  RouterRouteResultsPageFromJSON,
  RouterRouteResultsPageToJSON,
  RouterRouteUpdateParams,
  RouterRouteUpdateParamsFromJSON,
  RouterRouteUpdateParamsToJSON,
  Saga,
  SagaFromJSON,
  SagaToJSON,
  SagaResultsPage,
  SagaResultsPageFromJSON,
  SagaResultsPageToJSON,
  Sled,
  SledFromJSON,
  SledToJSON,
  SledResultsPage,
  SledResultsPageFromJSON,
  SledResultsPageToJSON,
  Vpc,
  VpcFromJSON,
  VpcToJSON,
  VpcCreateParams,
  VpcCreateParamsFromJSON,
  VpcCreateParamsToJSON,
  VpcFirewallRule,
  VpcFirewallRuleFromJSON,
  VpcFirewallRuleToJSON,
  VpcFirewallRuleResultsPage,
  VpcFirewallRuleResultsPageFromJSON,
  VpcFirewallRuleResultsPageToJSON,
  VpcFirewallRuleUpdate,
  VpcFirewallRuleUpdateFromJSON,
  VpcFirewallRuleUpdateToJSON,
  VpcResultsPage,
  VpcResultsPageFromJSON,
  VpcResultsPageToJSON,
  VpcRouter,
  VpcRouterFromJSON,
  VpcRouterToJSON,
  VpcRouterCreateParams,
  VpcRouterCreateParamsFromJSON,
  VpcRouterCreateParamsToJSON,
  VpcRouterResultsPage,
  VpcRouterResultsPageFromJSON,
  VpcRouterResultsPageToJSON,
  VpcRouterUpdateParams,
  VpcRouterUpdateParamsFromJSON,
  VpcRouterUpdateParamsToJSON,
  VpcSubnet,
  VpcSubnetFromJSON,
  VpcSubnetToJSON,
  VpcSubnetCreateParams,
  VpcSubnetCreateParamsFromJSON,
  VpcSubnetCreateParamsToJSON,
  VpcSubnetResultsPage,
  VpcSubnetResultsPageFromJSON,
  VpcSubnetResultsPageToJSON,
  VpcSubnetUpdateParams,
  VpcSubnetUpdateParamsFromJSON,
  VpcSubnetUpdateParamsToJSON,
  VpcUpdateParams,
  VpcUpdateParamsFromJSON,
  VpcUpdateParamsToJSON,
} from '../models'

export interface HardwareRacksGetRequest {
  limit?: number | null
  pageToken?: string | null
  sortBy?: IdSortMode
}

export interface HardwareRacksGetRackRequest {
  rackId: string
}

export interface HardwareSledsGetRequest {
  limit?: number | null
  pageToken?: string | null
  sortBy?: IdSortMode
}

export interface HardwareSledsGetSledRequest {
  sledId: string
}

export interface InstanceDisksDeleteDiskRequest {
  diskName: string
  instanceName: string
  organizationName: string
  projectName: string
}

export interface InstanceDisksGetRequest {
  instanceName: string
  organizationName: string
  projectName: string
}

export interface InstanceDisksGetDiskRequest {
  diskName: string
  instanceName: string
  organizationName: string
  projectName: string
}

export interface InstanceDisksPutDiskRequest {
  diskName: string
  instanceName: string
  organizationName: string
  projectName: string
}

export interface OrganizationProjectsDeleteProjectRequest {
  organizationName: string
  projectName: string
}

export interface OrganizationProjectsGetRequest {
  organizationName: string
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameOrIdSortMode
}

export interface OrganizationProjectsGetProjectRequest {
  organizationName: string
  projectName: string
}

export interface OrganizationProjectsPostRequest {
  organizationName: string
  projectCreate: ProjectCreate
}

export interface OrganizationProjectsPutProjectRequest {
  organizationName: string
  projectName: string
  projectUpdate: ProjectUpdate
}

export interface OrganizationsDeleteOrganizationRequest {
  organizationName: string
}

export interface OrganizationsGetRequest {
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameOrIdSortMode
}

export interface OrganizationsGetOrganizationRequest {
  organizationName: string
}

export interface OrganizationsPostRequest {
  organizationCreate: OrganizationCreate
}

export interface OrganizationsPutOrganizationRequest {
  organizationName: string
  organizationUpdate: OrganizationUpdate
}

export interface ProjectDisksDeleteDiskRequest {
  diskName: string
  organizationName: string
  projectName: string
}

export interface ProjectDisksGetRequest {
  organizationName: string
  projectName: string
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameSortMode
}

export interface ProjectDisksGetDiskRequest {
  diskName: string
  organizationName: string
  projectName: string
}

export interface ProjectDisksPostRequest {
  organizationName: string
  projectName: string
  diskCreateParams: DiskCreateParams
}

export interface ProjectInstancesDeleteInstanceRequest {
  instanceName: string
  organizationName: string
  projectName: string
}

export interface ProjectInstancesGetRequest {
  organizationName: string
  projectName: string
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameSortMode
}

export interface ProjectInstancesGetInstanceRequest {
  instanceName: string
  organizationName: string
  projectName: string
}

export interface ProjectInstancesInstanceRebootRequest {
  instanceName: string
  organizationName: string
  projectName: string
}

export interface ProjectInstancesInstanceStartRequest {
  instanceName: string
  organizationName: string
  projectName: string
}

export interface ProjectInstancesInstanceStopRequest {
  instanceName: string
  organizationName: string
  projectName: string
}

export interface ProjectInstancesPostRequest {
  organizationName: string
  projectName: string
  instanceCreateParams: InstanceCreateParams
}

export interface ProjectVpcsDeleteVpcRequest {
  organizationName: string
  projectName: string
  vpcName: string
}

export interface ProjectVpcsGetRequest {
  organizationName: string
  projectName: string
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameSortMode
}

export interface ProjectVpcsGetVpcRequest {
  organizationName: string
  projectName: string
  vpcName: string
}

export interface ProjectVpcsPostRequest {
  organizationName: string
  projectName: string
  vpcCreateParams: VpcCreateParams
}

export interface ProjectVpcsPutVpcRequest {
  organizationName: string
  projectName: string
  vpcName: string
  vpcUpdateParams: VpcUpdateParams
}

export interface RoutersRoutesDeleteRouteRequest {
  organizationName: string
  projectName: string
  routeName: string
  routerName: string
  vpcName: string
}

export interface RoutersRoutesGetRequest {
  organizationName: string
  projectName: string
  routerName: string
  vpcName: string
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameSortMode
}

export interface RoutersRoutesGetRouteRequest {
  organizationName: string
  projectName: string
  routeName: string
  routerName: string
  vpcName: string
}

export interface RoutersRoutesPostRequest {
  organizationName: string
  projectName: string
  routerName: string
  vpcName: string
  routerRouteCreateParams: RouterRouteCreateParams
}

export interface RoutersRoutesPutRouteRequest {
  organizationName: string
  projectName: string
  routeName: string
  routerName: string
  vpcName: string
  routerRouteUpdateParams: RouterRouteUpdateParams
}

export interface SagasGetRequest {
  limit?: number | null
  pageToken?: string | null
  sortBy?: IdSortMode
}

export interface SagasGetSagaRequest {
  sagaId: string
}

export interface VpcFirewallRulesGetRequest {
  organizationName: string
  projectName: string
  vpcName: string
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameSortMode
}

export interface VpcFirewallRulesPutRequest {
  organizationName: string
  projectName: string
  vpcName: string
  requestBody: { [key: string]: VpcFirewallRuleUpdate }
}

export interface VpcRoutersDeleteRouterRequest {
  organizationName: string
  projectName: string
  routerName: string
  vpcName: string
}

export interface VpcRoutersGetRequest {
  organizationName: string
  projectName: string
  vpcName: string
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameSortMode
}

export interface VpcRoutersGetRouterRequest {
  organizationName: string
  projectName: string
  routerName: string
  vpcName: string
}

export interface VpcRoutersPostRequest {
  organizationName: string
  projectName: string
  vpcName: string
  vpcRouterCreateParams: VpcRouterCreateParams
}

export interface VpcRoutersPutRouterRequest {
  organizationName: string
  projectName: string
  routerName: string
  vpcName: string
  vpcRouterUpdateParams: VpcRouterUpdateParams
}

export interface VpcSubnetsDeleteSubnetRequest {
  organizationName: string
  projectName: string
  subnetName: string
  vpcName: string
}

export interface VpcSubnetsGetRequest {
  organizationName: string
  projectName: string
  vpcName: string
  limit?: number | null
  pageToken?: string | null
  sortBy?: NameSortMode
}

export interface VpcSubnetsGetSubnetRequest {
  organizationName: string
  projectName: string
  subnetName: string
  vpcName: string
}

export interface VpcSubnetsPostRequest {
  organizationName: string
  projectName: string
  vpcName: string
  vpcSubnetCreateParams: VpcSubnetCreateParams
}

export interface VpcSubnetsPutSubnetRequest {
  organizationName: string
  projectName: string
  subnetName: string
  vpcName: string
  vpcSubnetUpdateParams: VpcSubnetUpdateParams
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * List racks in the system.
   */
  async hardwareRacksGetRaw(
    requestParameters: HardwareRacksGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<RackResultsPage>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/hardware/racks`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RackResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List racks in the system.
   */
  async hardwareRacksGet(
    requestParameters: HardwareRacksGetRequest,
    initOverrides?: RequestInit
  ): Promise<RackResultsPage> {
    const response = await this.hardwareRacksGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Fetch information about a particular rack.
   */
  async hardwareRacksGetRackRaw(
    requestParameters: HardwareRacksGetRackRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Rack>> {
    if (
      requestParameters.rackId === null ||
      requestParameters.rackId === undefined
    ) {
      throw new runtime.RequiredError(
        'rackId',
        'Required parameter requestParameters.rackId was null or undefined when calling hardwareRacksGetRack.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/hardware/racks/{rack_id}`.replace(
          `{${'rack_id'}}`,
          encodeURIComponent(String(requestParameters.rackId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RackFromJSON(jsonValue)
    )
  }

  /**
   * Fetch information about a particular rack.
   */
  async hardwareRacksGetRack(
    requestParameters: HardwareRacksGetRackRequest,
    initOverrides?: RequestInit
  ): Promise<Rack> {
    const response = await this.hardwareRacksGetRackRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * List sleds in the system.
   */
  async hardwareSledsGetRaw(
    requestParameters: HardwareSledsGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SledResultsPage>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/hardware/sleds`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SledResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List sleds in the system.
   */
  async hardwareSledsGet(
    requestParameters: HardwareSledsGetRequest,
    initOverrides?: RequestInit
  ): Promise<SledResultsPage> {
    const response = await this.hardwareSledsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Fetch information about a sled in the system.
   */
  async hardwareSledsGetSledRaw(
    requestParameters: HardwareSledsGetSledRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Sled>> {
    if (
      requestParameters.sledId === null ||
      requestParameters.sledId === undefined
    ) {
      throw new runtime.RequiredError(
        'sledId',
        'Required parameter requestParameters.sledId was null or undefined when calling hardwareSledsGetSled.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/hardware/sleds/{sled_id}`.replace(
          `{${'sled_id'}}`,
          encodeURIComponent(String(requestParameters.sledId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SledFromJSON(jsonValue)
    )
  }

  /**
   * Fetch information about a sled in the system.
   */
  async hardwareSledsGetSled(
    requestParameters: HardwareSledsGetSledRequest,
    initOverrides?: RequestInit
  ): Promise<Sled> {
    const response = await this.hardwareSledsGetSledRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Detach a disk from this instance.
   */
  async instanceDisksDeleteDiskRaw(
    requestParameters: InstanceDisksDeleteDiskRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling instanceDisksDeleteDisk.'
      )
    }

    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling instanceDisksDeleteDisk.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling instanceDisksDeleteDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling instanceDisksDeleteDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/{disk_name}`
          .replace(
            `{${'disk_name'}}`,
            encodeURIComponent(String(requestParameters.diskName))
          )
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Detach a disk from this instance.
   */
  async instanceDisksDeleteDisk(
    requestParameters: InstanceDisksDeleteDiskRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.instanceDisksDeleteDiskRaw(requestParameters, initOverrides)
  }

  /**
   * List disks attached to this instance.
   */
  async instanceDisksGetRaw(
    requestParameters: InstanceDisksGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<DiskAttachment>>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling instanceDisksGet.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling instanceDisksGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling instanceDisksGet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks`
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(DiskAttachmentFromJSON)
    )
  }

  /**
   * List disks attached to this instance.
   */
  async instanceDisksGet(
    requestParameters: InstanceDisksGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<DiskAttachment>> {
    const response = await this.instanceDisksGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Fetch a description of the attachment of this disk to this instance.
   */
  async instanceDisksGetDiskRaw(
    requestParameters: InstanceDisksGetDiskRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<DiskAttachment>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling instanceDisksGetDisk.'
      )
    }

    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling instanceDisksGetDisk.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling instanceDisksGetDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling instanceDisksGetDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/{disk_name}`
          .replace(
            `{${'disk_name'}}`,
            encodeURIComponent(String(requestParameters.diskName))
          )
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DiskAttachmentFromJSON(jsonValue)
    )
  }

  /**
   * Fetch a description of the attachment of this disk to this instance.
   */
  async instanceDisksGetDisk(
    requestParameters: InstanceDisksGetDiskRequest,
    initOverrides?: RequestInit
  ): Promise<DiskAttachment> {
    const response = await this.instanceDisksGetDiskRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Attach a disk to this instance.
   */
  async instanceDisksPutDiskRaw(
    requestParameters: InstanceDisksPutDiskRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<DiskAttachment>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling instanceDisksPutDisk.'
      )
    }

    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling instanceDisksPutDisk.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling instanceDisksPutDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling instanceDisksPutDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/{disk_name}`
          .replace(
            `{${'disk_name'}}`,
            encodeURIComponent(String(requestParameters.diskName))
          )
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DiskAttachmentFromJSON(jsonValue)
    )
  }

  /**
   * Attach a disk to this instance.
   */
  async instanceDisksPutDisk(
    requestParameters: InstanceDisksPutDiskRequest,
    initOverrides?: RequestInit
  ): Promise<DiskAttachment> {
    const response = await this.instanceDisksPutDiskRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Delete a specific project.
   */
  async organizationProjectsDeleteProjectRaw(
    requestParameters: OrganizationProjectsDeleteProjectRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling organizationProjectsDeleteProject.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling organizationProjectsDeleteProject.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a specific project.
   */
  async organizationProjectsDeleteProject(
    requestParameters: OrganizationProjectsDeleteProjectRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.organizationProjectsDeleteProjectRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * List all projects.
   */
  async organizationProjectsGetRaw(
    requestParameters: OrganizationProjectsGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<ProjectResultsPage>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling organizationProjectsGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects`.replace(
          `{${'organization_name'}}`,
          encodeURIComponent(String(requestParameters.organizationName))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProjectResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List all projects.
   */
  async organizationProjectsGet(
    requestParameters: OrganizationProjectsGetRequest,
    initOverrides?: RequestInit
  ): Promise<ProjectResultsPage> {
    const response = await this.organizationProjectsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Fetch a specific project
   */
  async organizationProjectsGetProjectRaw(
    requestParameters: OrganizationProjectsGetProjectRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Project>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling organizationProjectsGetProject.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling organizationProjectsGetProject.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProjectFromJSON(jsonValue)
    )
  }

  /**
   * Fetch a specific project
   */
  async organizationProjectsGetProject(
    requestParameters: OrganizationProjectsGetProjectRequest,
    initOverrides?: RequestInit
  ): Promise<Project> {
    const response = await this.organizationProjectsGetProjectRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a new project.
   */
  async organizationProjectsPostRaw(
    requestParameters: OrganizationProjectsPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Project>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling organizationProjectsPost.'
      )
    }

    if (
      requestParameters.projectCreate === null ||
      requestParameters.projectCreate === undefined
    ) {
      throw new runtime.RequiredError(
        'projectCreate',
        'Required parameter requestParameters.projectCreate was null or undefined when calling organizationProjectsPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects`.replace(
          `{${'organization_name'}}`,
          encodeURIComponent(String(requestParameters.organizationName))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectCreateToJSON(requestParameters.projectCreate),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProjectFromJSON(jsonValue)
    )
  }

  /**
   * Create a new project.
   */
  async organizationProjectsPost(
    requestParameters: OrganizationProjectsPostRequest,
    initOverrides?: RequestInit
  ): Promise<Project> {
    const response = await this.organizationProjectsPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Update a specific project.  * TODO-correctness: Is it valid for PUT to accept application/json that\'s a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.
   */
  async organizationProjectsPutProjectRaw(
    requestParameters: OrganizationProjectsPutProjectRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Project>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling organizationProjectsPutProject.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling organizationProjectsPutProject.'
      )
    }

    if (
      requestParameters.projectUpdate === null ||
      requestParameters.projectUpdate === undefined
    ) {
      throw new runtime.RequiredError(
        'projectUpdate',
        'Required parameter requestParameters.projectUpdate was null or undefined when calling organizationProjectsPutProject.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectUpdateToJSON(requestParameters.projectUpdate),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProjectFromJSON(jsonValue)
    )
  }

  /**
   * Update a specific project.  * TODO-correctness: Is it valid for PUT to accept application/json that\'s a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.
   */
  async organizationProjectsPutProject(
    requestParameters: OrganizationProjectsPutProjectRequest,
    initOverrides?: RequestInit
  ): Promise<Project> {
    const response = await this.organizationProjectsPutProjectRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Delete a specific organization.
   */
  async organizationsDeleteOrganizationRaw(
    requestParameters: OrganizationsDeleteOrganizationRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling organizationsDeleteOrganization.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}`.replace(
          `{${'organization_name'}}`,
          encodeURIComponent(String(requestParameters.organizationName))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a specific organization.
   */
  async organizationsDeleteOrganization(
    requestParameters: OrganizationsDeleteOrganizationRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.organizationsDeleteOrganizationRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * List all organizations.
   */
  async organizationsGetRaw(
    requestParameters: OrganizationsGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<OrganizationResultsPage>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrganizationResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List all organizations.
   */
  async organizationsGet(
    requestParameters: OrganizationsGetRequest,
    initOverrides?: RequestInit
  ): Promise<OrganizationResultsPage> {
    const response = await this.organizationsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Fetch a specific organization
   */
  async organizationsGetOrganizationRaw(
    requestParameters: OrganizationsGetOrganizationRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Organization>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling organizationsGetOrganization.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}`.replace(
          `{${'organization_name'}}`,
          encodeURIComponent(String(requestParameters.organizationName))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrganizationFromJSON(jsonValue)
    )
  }

  /**
   * Fetch a specific organization
   */
  async organizationsGetOrganization(
    requestParameters: OrganizationsGetOrganizationRequest,
    initOverrides?: RequestInit
  ): Promise<Organization> {
    const response = await this.organizationsGetOrganizationRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a new organization.
   */
  async organizationsPostRaw(
    requestParameters: OrganizationsPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Organization>> {
    if (
      requestParameters.organizationCreate === null ||
      requestParameters.organizationCreate === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationCreate',
        'Required parameter requestParameters.organizationCreate was null or undefined when calling organizationsPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: OrganizationCreateToJSON(requestParameters.organizationCreate),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrganizationFromJSON(jsonValue)
    )
  }

  /**
   * Create a new organization.
   */
  async organizationsPost(
    requestParameters: OrganizationsPostRequest,
    initOverrides?: RequestInit
  ): Promise<Organization> {
    const response = await this.organizationsPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Update a specific organization.  * TODO-correctness: Is it valid for PUT to accept application/json that\'s a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.
   */
  async organizationsPutOrganizationRaw(
    requestParameters: OrganizationsPutOrganizationRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Organization>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling organizationsPutOrganization.'
      )
    }

    if (
      requestParameters.organizationUpdate === null ||
      requestParameters.organizationUpdate === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationUpdate',
        'Required parameter requestParameters.organizationUpdate was null or undefined when calling organizationsPutOrganization.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}`.replace(
          `{${'organization_name'}}`,
          encodeURIComponent(String(requestParameters.organizationName))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: OrganizationUpdateToJSON(requestParameters.organizationUpdate),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrganizationFromJSON(jsonValue)
    )
  }

  /**
   * Update a specific organization.  * TODO-correctness: Is it valid for PUT to accept application/json that\'s a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.
   */
  async organizationsPutOrganization(
    requestParameters: OrganizationsPutOrganizationRequest,
    initOverrides?: RequestInit
  ): Promise<Organization> {
    const response = await this.organizationsPutOrganizationRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Delete a disk from a project.
   */
  async projectDisksDeleteDiskRaw(
    requestParameters: ProjectDisksDeleteDiskRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling projectDisksDeleteDisk.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectDisksDeleteDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectDisksDeleteDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}`
          .replace(
            `{${'disk_name'}}`,
            encodeURIComponent(String(requestParameters.diskName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a disk from a project.
   */
  async projectDisksDeleteDisk(
    requestParameters: ProjectDisksDeleteDiskRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.projectDisksDeleteDiskRaw(requestParameters, initOverrides)
  }

  /**
   * List disks in a project.
   */
  async projectDisksGetRaw(
    requestParameters: ProjectDisksGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<DiskResultsPage>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectDisksGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectDisksGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/disks`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DiskResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List disks in a project.
   */
  async projectDisksGet(
    requestParameters: ProjectDisksGetRequest,
    initOverrides?: RequestInit
  ): Promise<DiskResultsPage> {
    const response = await this.projectDisksGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Fetch a single disk in a project.
   */
  async projectDisksGetDiskRaw(
    requestParameters: ProjectDisksGetDiskRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Disk>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling projectDisksGetDisk.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectDisksGetDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectDisksGetDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}`
          .replace(
            `{${'disk_name'}}`,
            encodeURIComponent(String(requestParameters.diskName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DiskFromJSON(jsonValue)
    )
  }

  /**
   * Fetch a single disk in a project.
   */
  async projectDisksGetDisk(
    requestParameters: ProjectDisksGetDiskRequest,
    initOverrides?: RequestInit
  ): Promise<Disk> {
    const response = await this.projectDisksGetDiskRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a disk in a project.  * TODO-correctness See note about instance create.  This should be async.
   */
  async projectDisksPostRaw(
    requestParameters: ProjectDisksPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Disk>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectDisksPost.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectDisksPost.'
      )
    }

    if (
      requestParameters.diskCreateParams === null ||
      requestParameters.diskCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'diskCreateParams',
        'Required parameter requestParameters.diskCreateParams was null or undefined when calling projectDisksPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/disks`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: DiskCreateParamsToJSON(requestParameters.diskCreateParams),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DiskFromJSON(jsonValue)
    )
  }

  /**
   * Create a disk in a project.  * TODO-correctness See note about instance create.  This should be async.
   */
  async projectDisksPost(
    requestParameters: ProjectDisksPostRequest,
    initOverrides?: RequestInit
  ): Promise<Disk> {
    const response = await this.projectDisksPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Delete an instance from a project.
   */
  async projectInstancesDeleteInstanceRaw(
    requestParameters: ProjectInstancesDeleteInstanceRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling projectInstancesDeleteInstance.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectInstancesDeleteInstance.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectInstancesDeleteInstance.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}`
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete an instance from a project.
   */
  async projectInstancesDeleteInstance(
    requestParameters: ProjectInstancesDeleteInstanceRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.projectInstancesDeleteInstanceRaw(
      requestParameters,
      initOverrides
    )
  }

  /**
   * List instances in a project.
   */
  async projectInstancesGetRaw(
    requestParameters: ProjectInstancesGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<InstanceResultsPage>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectInstancesGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectInstancesGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InstanceResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List instances in a project.
   */
  async projectInstancesGet(
    requestParameters: ProjectInstancesGetRequest,
    initOverrides?: RequestInit
  ): Promise<InstanceResultsPage> {
    const response = await this.projectInstancesGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get an instance in a project.
   */
  async projectInstancesGetInstanceRaw(
    requestParameters: ProjectInstancesGetInstanceRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Instance>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling projectInstancesGetInstance.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectInstancesGetInstance.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectInstancesGetInstance.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}`
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InstanceFromJSON(jsonValue)
    )
  }

  /**
   * Get an instance in a project.
   */
  async projectInstancesGetInstance(
    requestParameters: ProjectInstancesGetInstanceRequest,
    initOverrides?: RequestInit
  ): Promise<Instance> {
    const response = await this.projectInstancesGetInstanceRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Reboot an instance.
   */
  async projectInstancesInstanceRebootRaw(
    requestParameters: ProjectInstancesInstanceRebootRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Instance>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling projectInstancesInstanceReboot.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectInstancesInstanceReboot.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectInstancesInstanceReboot.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/reboot`
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InstanceFromJSON(jsonValue)
    )
  }

  /**
   * Reboot an instance.
   */
  async projectInstancesInstanceReboot(
    requestParameters: ProjectInstancesInstanceRebootRequest,
    initOverrides?: RequestInit
  ): Promise<Instance> {
    const response = await this.projectInstancesInstanceRebootRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Boot an instance.
   */
  async projectInstancesInstanceStartRaw(
    requestParameters: ProjectInstancesInstanceStartRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Instance>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling projectInstancesInstanceStart.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectInstancesInstanceStart.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectInstancesInstanceStart.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/start`
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InstanceFromJSON(jsonValue)
    )
  }

  /**
   * Boot an instance.
   */
  async projectInstancesInstanceStart(
    requestParameters: ProjectInstancesInstanceStartRequest,
    initOverrides?: RequestInit
  ): Promise<Instance> {
    const response = await this.projectInstancesInstanceStartRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Halt an instance.
   */
  async projectInstancesInstanceStopRaw(
    requestParameters: ProjectInstancesInstanceStopRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Instance>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling projectInstancesInstanceStop.'
      )
    }

    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectInstancesInstanceStop.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectInstancesInstanceStop.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/stop`
          .replace(
            `{${'instance_name'}}`,
            encodeURIComponent(String(requestParameters.instanceName))
          )
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InstanceFromJSON(jsonValue)
    )
  }

  /**
   * Halt an instance.
   */
  async projectInstancesInstanceStop(
    requestParameters: ProjectInstancesInstanceStopRequest,
    initOverrides?: RequestInit
  ): Promise<Instance> {
    const response = await this.projectInstancesInstanceStopRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create an instance in a project.  * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it\'s just not booted yet.  Maybe the boot operation is what\'s a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there\'s no actual resource created?
   */
  async projectInstancesPostRaw(
    requestParameters: ProjectInstancesPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Instance>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectInstancesPost.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectInstancesPost.'
      )
    }

    if (
      requestParameters.instanceCreateParams === null ||
      requestParameters.instanceCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceCreateParams',
        'Required parameter requestParameters.instanceCreateParams was null or undefined when calling projectInstancesPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/instances`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: InstanceCreateParamsToJSON(
          requestParameters.instanceCreateParams
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InstanceFromJSON(jsonValue)
    )
  }

  /**
   * Create an instance in a project.  * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it\'s just not booted yet.  Maybe the boot operation is what\'s a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there\'s no actual resource created?
   */
  async projectInstancesPost(
    requestParameters: ProjectInstancesPostRequest,
    initOverrides?: RequestInit
  ): Promise<Instance> {
    const response = await this.projectInstancesPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Delete a vpc from a project.
   */
  async projectVpcsDeleteVpcRaw(
    requestParameters: ProjectVpcsDeleteVpcRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectVpcsDeleteVpc.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectVpcsDeleteVpc.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling projectVpcsDeleteVpc.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a vpc from a project.
   */
  async projectVpcsDeleteVpc(
    requestParameters: ProjectVpcsDeleteVpcRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.projectVpcsDeleteVpcRaw(requestParameters, initOverrides)
  }

  /**
   * List VPCs in a project.
   */
  async projectVpcsGetRaw(
    requestParameters: ProjectVpcsGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<VpcResultsPage>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectVpcsGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectVpcsGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List VPCs in a project.
   */
  async projectVpcsGet(
    requestParameters: ProjectVpcsGetRequest,
    initOverrides?: RequestInit
  ): Promise<VpcResultsPage> {
    const response = await this.projectVpcsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get a VPC in a project.
   */
  async projectVpcsGetVpcRaw(
    requestParameters: ProjectVpcsGetVpcRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Vpc>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectVpcsGetVpc.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectVpcsGetVpc.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling projectVpcsGetVpc.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcFromJSON(jsonValue)
    )
  }

  /**
   * Get a VPC in a project.
   */
  async projectVpcsGetVpc(
    requestParameters: ProjectVpcsGetVpcRequest,
    initOverrides?: RequestInit
  ): Promise<Vpc> {
    const response = await this.projectVpcsGetVpcRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a VPC in a project.
   */
  async projectVpcsPostRaw(
    requestParameters: ProjectVpcsPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Vpc>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectVpcsPost.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectVpcsPost.'
      )
    }

    if (
      requestParameters.vpcCreateParams === null ||
      requestParameters.vpcCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcCreateParams',
        'Required parameter requestParameters.vpcCreateParams was null or undefined when calling projectVpcsPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: VpcCreateParamsToJSON(requestParameters.vpcCreateParams),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcFromJSON(jsonValue)
    )
  }

  /**
   * Create a VPC in a project.
   */
  async projectVpcsPost(
    requestParameters: ProjectVpcsPostRequest,
    initOverrides?: RequestInit
  ): Promise<Vpc> {
    const response = await this.projectVpcsPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Update a VPC.
   */
  async projectVpcsPutVpcRaw(
    requestParameters: ProjectVpcsPutVpcRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling projectVpcsPutVpc.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling projectVpcsPutVpc.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling projectVpcsPutVpc.'
      )
    }

    if (
      requestParameters.vpcUpdateParams === null ||
      requestParameters.vpcUpdateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcUpdateParams',
        'Required parameter requestParameters.vpcUpdateParams was null or undefined when calling projectVpcsPutVpc.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: VpcUpdateParamsToJSON(requestParameters.vpcUpdateParams),
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Update a VPC.
   */
  async projectVpcsPutVpc(
    requestParameters: ProjectVpcsPutVpcRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.projectVpcsPutVpcRaw(requestParameters, initOverrides)
  }

  /**
   * Delete a route from its router
   */
  async routersRoutesDeleteRouteRaw(
    requestParameters: RoutersRoutesDeleteRouteRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling routersRoutesDeleteRoute.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling routersRoutesDeleteRoute.'
      )
    }

    if (
      requestParameters.routeName === null ||
      requestParameters.routeName === undefined
    ) {
      throw new runtime.RequiredError(
        'routeName',
        'Required parameter requestParameters.routeName was null or undefined when calling routersRoutesDeleteRoute.'
      )
    }

    if (
      requestParameters.routerName === null ||
      requestParameters.routerName === undefined
    ) {
      throw new runtime.RequiredError(
        'routerName',
        'Required parameter requestParameters.routerName was null or undefined when calling routersRoutesDeleteRoute.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling routersRoutesDeleteRoute.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'route_name'}}`,
            encodeURIComponent(String(requestParameters.routeName))
          )
          .replace(
            `{${'router_name'}}`,
            encodeURIComponent(String(requestParameters.routerName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a route from its router
   */
  async routersRoutesDeleteRoute(
    requestParameters: RoutersRoutesDeleteRouteRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.routersRoutesDeleteRouteRaw(requestParameters, initOverrides)
  }

  /**
   * List a Router\'s routes
   */
  async routersRoutesGetRaw(
    requestParameters: RoutersRoutesGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<RouterRouteResultsPage>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling routersRoutesGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling routersRoutesGet.'
      )
    }

    if (
      requestParameters.routerName === null ||
      requestParameters.routerName === undefined
    ) {
      throw new runtime.RequiredError(
        'routerName',
        'Required parameter requestParameters.routerName was null or undefined when calling routersRoutesGet.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling routersRoutesGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'router_name'}}`,
            encodeURIComponent(String(requestParameters.routerName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RouterRouteResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List a Router\'s routes
   */
  async routersRoutesGet(
    requestParameters: RoutersRoutesGetRequest,
    initOverrides?: RequestInit
  ): Promise<RouterRouteResultsPage> {
    const response = await this.routersRoutesGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get a VPC Router route
   */
  async routersRoutesGetRouteRaw(
    requestParameters: RoutersRoutesGetRouteRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<RouterRoute>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling routersRoutesGetRoute.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling routersRoutesGetRoute.'
      )
    }

    if (
      requestParameters.routeName === null ||
      requestParameters.routeName === undefined
    ) {
      throw new runtime.RequiredError(
        'routeName',
        'Required parameter requestParameters.routeName was null or undefined when calling routersRoutesGetRoute.'
      )
    }

    if (
      requestParameters.routerName === null ||
      requestParameters.routerName === undefined
    ) {
      throw new runtime.RequiredError(
        'routerName',
        'Required parameter requestParameters.routerName was null or undefined when calling routersRoutesGetRoute.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling routersRoutesGetRoute.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'route_name'}}`,
            encodeURIComponent(String(requestParameters.routeName))
          )
          .replace(
            `{${'router_name'}}`,
            encodeURIComponent(String(requestParameters.routerName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RouterRouteFromJSON(jsonValue)
    )
  }

  /**
   * Get a VPC Router route
   */
  async routersRoutesGetRoute(
    requestParameters: RoutersRoutesGetRouteRequest,
    initOverrides?: RequestInit
  ): Promise<RouterRoute> {
    const response = await this.routersRoutesGetRouteRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a VPC Router
   */
  async routersRoutesPostRaw(
    requestParameters: RoutersRoutesPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<RouterRoute>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling routersRoutesPost.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling routersRoutesPost.'
      )
    }

    if (
      requestParameters.routerName === null ||
      requestParameters.routerName === undefined
    ) {
      throw new runtime.RequiredError(
        'routerName',
        'Required parameter requestParameters.routerName was null or undefined when calling routersRoutesPost.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling routersRoutesPost.'
      )
    }

    if (
      requestParameters.routerRouteCreateParams === null ||
      requestParameters.routerRouteCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'routerRouteCreateParams',
        'Required parameter requestParameters.routerRouteCreateParams was null or undefined when calling routersRoutesPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'router_name'}}`,
            encodeURIComponent(String(requestParameters.routerName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RouterRouteCreateParamsToJSON(
          requestParameters.routerRouteCreateParams
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RouterRouteFromJSON(jsonValue)
    )
  }

  /**
   * Create a VPC Router
   */
  async routersRoutesPost(
    requestParameters: RoutersRoutesPostRequest,
    initOverrides?: RequestInit
  ): Promise<RouterRoute> {
    const response = await this.routersRoutesPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Update a Router route
   */
  async routersRoutesPutRouteRaw(
    requestParameters: RoutersRoutesPutRouteRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling routersRoutesPutRoute.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling routersRoutesPutRoute.'
      )
    }

    if (
      requestParameters.routeName === null ||
      requestParameters.routeName === undefined
    ) {
      throw new runtime.RequiredError(
        'routeName',
        'Required parameter requestParameters.routeName was null or undefined when calling routersRoutesPutRoute.'
      )
    }

    if (
      requestParameters.routerName === null ||
      requestParameters.routerName === undefined
    ) {
      throw new runtime.RequiredError(
        'routerName',
        'Required parameter requestParameters.routerName was null or undefined when calling routersRoutesPutRoute.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling routersRoutesPutRoute.'
      )
    }

    if (
      requestParameters.routerRouteUpdateParams === null ||
      requestParameters.routerRouteUpdateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'routerRouteUpdateParams',
        'Required parameter requestParameters.routerRouteUpdateParams was null or undefined when calling routersRoutesPutRoute.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'route_name'}}`,
            encodeURIComponent(String(requestParameters.routeName))
          )
          .replace(
            `{${'router_name'}}`,
            encodeURIComponent(String(requestParameters.routerName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: RouterRouteUpdateParamsToJSON(
          requestParameters.routerRouteUpdateParams
        ),
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Update a Router route
   */
  async routersRoutesPutRoute(
    requestParameters: RoutersRoutesPutRouteRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.routersRoutesPutRouteRaw(requestParameters, initOverrides)
  }

  /**
   * List all sagas (for debugging)
   */
  async sagasGetRaw(
    requestParameters: SagasGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<SagaResultsPage>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/sagas`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SagaResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List all sagas (for debugging)
   */
  async sagasGet(
    requestParameters: SagasGetRequest,
    initOverrides?: RequestInit
  ): Promise<SagaResultsPage> {
    const response = await this.sagasGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Fetch information about a single saga (for debugging)
   */
  async sagasGetSagaRaw(
    requestParameters: SagasGetSagaRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Saga>> {
    if (
      requestParameters.sagaId === null ||
      requestParameters.sagaId === undefined
    ) {
      throw new runtime.RequiredError(
        'sagaId',
        'Required parameter requestParameters.sagaId was null or undefined when calling sagasGetSaga.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/sagas/{saga_id}`.replace(
          `{${'saga_id'}}`,
          encodeURIComponent(String(requestParameters.sagaId))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SagaFromJSON(jsonValue)
    )
  }

  /**
   * Fetch information about a single saga (for debugging)
   */
  async sagasGetSaga(
    requestParameters: SagasGetSagaRequest,
    initOverrides?: RequestInit
  ): Promise<Saga> {
    const response = await this.sagasGetSagaRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * List firewall rules for a VPC.
   */
  async vpcFirewallRulesGetRaw(
    requestParameters: VpcFirewallRulesGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<VpcFirewallRuleResultsPage>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcFirewallRulesGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcFirewallRulesGet.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcFirewallRulesGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcFirewallRuleResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List firewall rules for a VPC.
   */
  async vpcFirewallRulesGet(
    requestParameters: VpcFirewallRulesGetRequest,
    initOverrides?: RequestInit
  ): Promise<VpcFirewallRuleResultsPage> {
    const response = await this.vpcFirewallRulesGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Replace the firewall rules for a VPC
   */
  async vpcFirewallRulesPutRaw(
    requestParameters: VpcFirewallRulesPutRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<{ [key: string]: VpcFirewallRule }>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcFirewallRulesPut.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcFirewallRulesPut.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcFirewallRulesPut.'
      )
    }

    if (
      requestParameters.requestBody === null ||
      requestParameters.requestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter requestParameters.requestBody was null or undefined when calling vpcFirewallRulesPut.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.requestBody,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      runtime.mapValues(jsonValue, VpcFirewallRuleFromJSON)
    )
  }

  /**
   * Replace the firewall rules for a VPC
   */
  async vpcFirewallRulesPut(
    requestParameters: VpcFirewallRulesPutRequest,
    initOverrides?: RequestInit
  ): Promise<{ [key: string]: VpcFirewallRule }> {
    const response = await this.vpcFirewallRulesPutRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Delete a router from its VPC
   */
  async vpcRoutersDeleteRouterRaw(
    requestParameters: VpcRoutersDeleteRouterRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcRoutersDeleteRouter.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcRoutersDeleteRouter.'
      )
    }

    if (
      requestParameters.routerName === null ||
      requestParameters.routerName === undefined
    ) {
      throw new runtime.RequiredError(
        'routerName',
        'Required parameter requestParameters.routerName was null or undefined when calling vpcRoutersDeleteRouter.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcRoutersDeleteRouter.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'router_name'}}`,
            encodeURIComponent(String(requestParameters.routerName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a router from its VPC
   */
  async vpcRoutersDeleteRouter(
    requestParameters: VpcRoutersDeleteRouterRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.vpcRoutersDeleteRouterRaw(requestParameters, initOverrides)
  }

  /**
   * List VPC Custom and System Routers
   */
  async vpcRoutersGetRaw(
    requestParameters: VpcRoutersGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<VpcRouterResultsPage>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcRoutersGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcRoutersGet.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcRoutersGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcRouterResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List VPC Custom and System Routers
   */
  async vpcRoutersGet(
    requestParameters: VpcRoutersGetRequest,
    initOverrides?: RequestInit
  ): Promise<VpcRouterResultsPage> {
    const response = await this.vpcRoutersGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get a VPC Router
   */
  async vpcRoutersGetRouterRaw(
    requestParameters: VpcRoutersGetRouterRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<VpcRouter>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcRoutersGetRouter.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcRoutersGetRouter.'
      )
    }

    if (
      requestParameters.routerName === null ||
      requestParameters.routerName === undefined
    ) {
      throw new runtime.RequiredError(
        'routerName',
        'Required parameter requestParameters.routerName was null or undefined when calling vpcRoutersGetRouter.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcRoutersGetRouter.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'router_name'}}`,
            encodeURIComponent(String(requestParameters.routerName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcRouterFromJSON(jsonValue)
    )
  }

  /**
   * Get a VPC Router
   */
  async vpcRoutersGetRouter(
    requestParameters: VpcRoutersGetRouterRequest,
    initOverrides?: RequestInit
  ): Promise<VpcRouter> {
    const response = await this.vpcRoutersGetRouterRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a VPC Router
   */
  async vpcRoutersPostRaw(
    requestParameters: VpcRoutersPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<VpcRouter>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcRoutersPost.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcRoutersPost.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcRoutersPost.'
      )
    }

    if (
      requestParameters.vpcRouterCreateParams === null ||
      requestParameters.vpcRouterCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcRouterCreateParams',
        'Required parameter requestParameters.vpcRouterCreateParams was null or undefined when calling vpcRoutersPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: VpcRouterCreateParamsToJSON(
          requestParameters.vpcRouterCreateParams
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcRouterFromJSON(jsonValue)
    )
  }

  /**
   * Create a VPC Router
   */
  async vpcRoutersPost(
    requestParameters: VpcRoutersPostRequest,
    initOverrides?: RequestInit
  ): Promise<VpcRouter> {
    const response = await this.vpcRoutersPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Update a VPC Router
   */
  async vpcRoutersPutRouterRaw(
    requestParameters: VpcRoutersPutRouterRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcRoutersPutRouter.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcRoutersPutRouter.'
      )
    }

    if (
      requestParameters.routerName === null ||
      requestParameters.routerName === undefined
    ) {
      throw new runtime.RequiredError(
        'routerName',
        'Required parameter requestParameters.routerName was null or undefined when calling vpcRoutersPutRouter.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcRoutersPutRouter.'
      )
    }

    if (
      requestParameters.vpcRouterUpdateParams === null ||
      requestParameters.vpcRouterUpdateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcRouterUpdateParams',
        'Required parameter requestParameters.vpcRouterUpdateParams was null or undefined when calling vpcRoutersPutRouter.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'router_name'}}`,
            encodeURIComponent(String(requestParameters.routerName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: VpcRouterUpdateParamsToJSON(
          requestParameters.vpcRouterUpdateParams
        ),
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Update a VPC Router
   */
  async vpcRoutersPutRouter(
    requestParameters: VpcRoutersPutRouterRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.vpcRoutersPutRouterRaw(requestParameters, initOverrides)
  }

  /**
   * Delete a subnet from a VPC.
   */
  async vpcSubnetsDeleteSubnetRaw(
    requestParameters: VpcSubnetsDeleteSubnetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcSubnetsDeleteSubnet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcSubnetsDeleteSubnet.'
      )
    }

    if (
      requestParameters.subnetName === null ||
      requestParameters.subnetName === undefined
    ) {
      throw new runtime.RequiredError(
        'subnetName',
        'Required parameter requestParameters.subnetName was null or undefined when calling vpcSubnetsDeleteSubnet.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcSubnetsDeleteSubnet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'subnet_name'}}`,
            encodeURIComponent(String(requestParameters.subnetName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a subnet from a VPC.
   */
  async vpcSubnetsDeleteSubnet(
    requestParameters: VpcSubnetsDeleteSubnetRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.vpcSubnetsDeleteSubnetRaw(requestParameters, initOverrides)
  }

  /**
   * List subnets in a VPC.
   */
  async vpcSubnetsGetRaw(
    requestParameters: VpcSubnetsGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<VpcSubnetResultsPage>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcSubnetsGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcSubnetsGet.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcSubnetsGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcSubnetResultsPageFromJSON(jsonValue)
    )
  }

  /**
   * List subnets in a VPC.
   */
  async vpcSubnetsGet(
    requestParameters: VpcSubnetsGetRequest,
    initOverrides?: RequestInit
  ): Promise<VpcSubnetResultsPage> {
    const response = await this.vpcSubnetsGetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Get subnet in a VPC.
   */
  async vpcSubnetsGetSubnetRaw(
    requestParameters: VpcSubnetsGetSubnetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<VpcSubnet>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcSubnetsGetSubnet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcSubnetsGetSubnet.'
      )
    }

    if (
      requestParameters.subnetName === null ||
      requestParameters.subnetName === undefined
    ) {
      throw new runtime.RequiredError(
        'subnetName',
        'Required parameter requestParameters.subnetName was null or undefined when calling vpcSubnetsGetSubnet.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcSubnetsGetSubnet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'subnet_name'}}`,
            encodeURIComponent(String(requestParameters.subnetName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcSubnetFromJSON(jsonValue)
    )
  }

  /**
   * Get subnet in a VPC.
   */
  async vpcSubnetsGetSubnet(
    requestParameters: VpcSubnetsGetSubnetRequest,
    initOverrides?: RequestInit
  ): Promise<VpcSubnet> {
    const response = await this.vpcSubnetsGetSubnetRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Create a subnet in a VPC.
   */
  async vpcSubnetsPostRaw(
    requestParameters: VpcSubnetsPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<VpcSubnet>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcSubnetsPost.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcSubnetsPost.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcSubnetsPost.'
      )
    }

    if (
      requestParameters.vpcSubnetCreateParams === null ||
      requestParameters.vpcSubnetCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcSubnetCreateParams',
        'Required parameter requestParameters.vpcSubnetCreateParams was null or undefined when calling vpcSubnetsPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: VpcSubnetCreateParamsToJSON(
          requestParameters.vpcSubnetCreateParams
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VpcSubnetFromJSON(jsonValue)
    )
  }

  /**
   * Create a subnet in a VPC.
   */
  async vpcSubnetsPost(
    requestParameters: VpcSubnetsPostRequest,
    initOverrides?: RequestInit
  ): Promise<VpcSubnet> {
    const response = await this.vpcSubnetsPostRaw(
      requestParameters,
      initOverrides
    )
    return await response.value()
  }

  /**
   * Update a VPC Subnet.
   */
  async vpcSubnetsPutSubnetRaw(
    requestParameters: VpcSubnetsPutSubnetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.organizationName === null ||
      requestParameters.organizationName === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationName',
        'Required parameter requestParameters.organizationName was null or undefined when calling vpcSubnetsPutSubnet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling vpcSubnetsPutSubnet.'
      )
    }

    if (
      requestParameters.subnetName === null ||
      requestParameters.subnetName === undefined
    ) {
      throw new runtime.RequiredError(
        'subnetName',
        'Required parameter requestParameters.subnetName was null or undefined when calling vpcSubnetsPutSubnet.'
      )
    }

    if (
      requestParameters.vpcName === null ||
      requestParameters.vpcName === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcName',
        'Required parameter requestParameters.vpcName was null or undefined when calling vpcSubnetsPutSubnet.'
      )
    }

    if (
      requestParameters.vpcSubnetUpdateParams === null ||
      requestParameters.vpcSubnetUpdateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'vpcSubnetUpdateParams',
        'Required parameter requestParameters.vpcSubnetUpdateParams was null or undefined when calling vpcSubnetsPutSubnet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}`
          .replace(
            `{${'organization_name'}}`,
            encodeURIComponent(String(requestParameters.organizationName))
          )
          .replace(
            `{${'project_name'}}`,
            encodeURIComponent(String(requestParameters.projectName))
          )
          .replace(
            `{${'subnet_name'}}`,
            encodeURIComponent(String(requestParameters.subnetName))
          )
          .replace(
            `{${'vpc_name'}}`,
            encodeURIComponent(String(requestParameters.vpcName))
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: VpcSubnetUpdateParamsToJSON(
          requestParameters.vpcSubnetUpdateParams
        ),
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Update a VPC Subnet.
   */
  async vpcSubnetsPutSubnet(
    requestParameters: VpcSubnetsPutSubnetRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.vpcSubnetsPutSubnetRaw(requestParameters, initOverrides)
  }
}
