/* tslint:disable */
/* eslint-disable */
/**
 * Oxide Region API
 * API for interacting with the Oxide control plane
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: api@oxide.computer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  IdentityMetadata,
  IdentityMetadataFromJSON,
  IdentityMetadataFromJSONTyped,
  IdentityMetadataToJSON,
  RouteDestination,
  RouteDestinationFromJSON,
  RouteDestinationFromJSONTyped,
  RouteDestinationToJSON,
  RouteTarget,
  RouteTargetFromJSON,
  RouteTargetFromJSONTyped,
  RouteTargetToJSON,
  RouterRouteKind,
  RouterRouteKindFromJSON,
  RouterRouteKindFromJSONTyped,
  RouterRouteKindToJSON,
} from './'

/**
 * A route defines a rule that governs where traffic should be sent based on its destination.
 * @export
 * @interface RouterRoute
 */
export interface RouterRoute {
  /**
   *
   * @type {RouteDestination}
   * @memberof RouterRoute
   */
  destination: RouteDestination
  /**
   * common identifying metadata
   * @type {IdentityMetadata}
   * @memberof RouterRoute
   */
  identity: IdentityMetadata
  /**
   * Describes the kind of router. Set at creation. `read-only`
   * @type {RouterRouteKind}
   * @memberof RouterRoute
   */
  kind: RouterRouteKind
  /**
   * The VPC Router to which the route belongs.
   * @type {string}
   * @memberof RouterRoute
   */
  routerId: string
  /**
   *
   * @type {RouteTarget}
   * @memberof RouterRoute
   */
  target: RouteTarget
}

export function RouterRouteFromJSON(json: any): RouterRoute {
  return RouterRouteFromJSONTyped(json, false)
}

export function RouterRouteFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): RouterRoute {
  if (json === undefined || json === null) {
    return json
  }
  return {
    destination: RouteDestinationFromJSON(json['destination']),
    identity: IdentityMetadataFromJSON(json['identity']),
    kind: RouterRouteKindFromJSON(json['kind']),
    routerId: json['router_id'],
    target: RouteTargetFromJSON(json['target']),
  }
}

export function RouterRouteToJSON(value?: RouterRoute | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    destination: RouteDestinationToJSON(value.destination),
    identity: IdentityMetadataToJSON(value.identity),
    kind: RouterRouteKindToJSON(value.kind),
    router_id: value.routerId,
    target: RouteTargetToJSON(value.target),
  }
}
