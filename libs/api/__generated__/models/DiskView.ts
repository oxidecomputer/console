/* tslint:disable */
/* eslint-disable */
/**
 * Oxide Region API
 * API for interacting with the Oxide control plane
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: api@oxide.computer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  DiskState,
  DiskStateFromJSON,
  DiskStateFromJSONTyped,
  DiskStateToJSON,
} from './'

/**
 * Client view of an [`Disk`]
 * @export
 * @interface DiskView
 */
export interface DiskView {
  /**
   * human-readable free-form text about a resource
   * @type {string}
   * @memberof DiskView
   */
  description: string
  /**
   *
   * @type {string}
   * @memberof DiskView
   */
  devicePath: string
  /**
   * unique, immutable, system-controlled identifier for each resource
   * @type {string}
   * @memberof DiskView
   */
  id: string
  /**
   * Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.
   * @type {string}
   * @memberof DiskView
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof DiskView
   */
  projectId: string
  /**
   * A count of bytes, typically used either for memory or storage capacity
   *
   * The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.
   * @type {number}
   * @memberof DiskView
   */
  size: number
  /**
   *
   * @type {string}
   * @memberof DiskView
   */
  snapshotId?: string
  /**
   *
   * @type {DiskState}
   * @memberof DiskView
   */
  state: DiskState
  /**
   * timestamp when this resource was created
   * @type {Date}
   * @memberof DiskView
   */
  timeCreated: Date
  /**
   * timestamp when this resource was last modified
   * @type {Date}
   * @memberof DiskView
   */
  timeModified: Date
}

export function DiskViewFromJSON(json: any): DiskView {
  return DiskViewFromJSONTyped(json, false)
}

export function DiskViewFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DiskView {
  if (json === undefined || json === null) {
    return json
  }
  return {
    description: json['description'],
    devicePath: json['devicePath'],
    id: json['id'],
    name: json['name'],
    projectId: json['projectId'],
    size: json['size'],
    snapshotId: !exists(json, 'snapshotId') ? undefined : json['snapshotId'],
    state: DiskStateFromJSON(json['state']),
    timeCreated: new Date(json['timeCreated']),
    timeModified: new Date(json['timeModified']),
  }
}

export function DiskViewToJSON(value?: DiskView | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    description: value.description,
    devicePath: value.devicePath,
    id: value.id,
    name: value.name,
    projectId: value.projectId,
    size: value.size,
    snapshotId: value.snapshotId,
    state: DiskStateToJSON(value.state),
    timeCreated: value.timeCreated.toISOString(),
    timeModified: value.timeModified.toISOString(),
  }
}
