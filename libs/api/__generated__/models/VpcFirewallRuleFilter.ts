/* tslint:disable */
/* eslint-disable */
/**
 * Oxide Region API
 * API for interacting with the Oxide control plane
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: api@oxide.computer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  VpcFirewallRuleHostFilter,
  VpcFirewallRuleHostFilterFromJSON,
  VpcFirewallRuleHostFilterFromJSONTyped,
  VpcFirewallRuleHostFilterToJSON,
  VpcFirewallRuleProtocol,
  VpcFirewallRuleProtocolFromJSON,
  VpcFirewallRuleProtocolFromJSONTyped,
  VpcFirewallRuleProtocolToJSON,
} from './'

/**
 * Filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.
 * @export
 * @interface VpcFirewallRuleFilter
 */
export interface VpcFirewallRuleFilter {
  /**
   * If present, the sources (if incoming) or destinations (if outgoing) this rule applies to.
   * @type {Array<VpcFirewallRuleHostFilter>}
   * @memberof VpcFirewallRuleFilter
   */
  hosts?: Array<VpcFirewallRuleHostFilter> | null
  /**
   * If present, the destination ports this rule applies to.
   * @type {Array<string>}
   * @memberof VpcFirewallRuleFilter
   */
  ports?: Array<string> | null
  /**
   * If present, the networking protocols this rule applies to.
   * @type {Array<VpcFirewallRuleProtocol>}
   * @memberof VpcFirewallRuleFilter
   */
  protocols?: Array<VpcFirewallRuleProtocol> | null
}

export function VpcFirewallRuleFilterFromJSON(
  json: any
): VpcFirewallRuleFilter {
  return VpcFirewallRuleFilterFromJSONTyped(json, false)
}

export function VpcFirewallRuleFilterFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): VpcFirewallRuleFilter {
  if (json === undefined || json === null) {
    return json
  }
  return {
    hosts: !exists(json, 'hosts')
      ? undefined
      : json['hosts'] === null
      ? null
      : (json['hosts'] as Array<any>).map(VpcFirewallRuleHostFilterFromJSON),
    ports: !exists(json, 'ports') ? undefined : json['ports'],
    protocols: !exists(json, 'protocols')
      ? undefined
      : json['protocols'] === null
      ? null
      : (json['protocols'] as Array<any>).map(VpcFirewallRuleProtocolFromJSON),
  }
}

export function VpcFirewallRuleFilterToJSON(
  value?: VpcFirewallRuleFilter | null
): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    hosts:
      value.hosts === undefined
        ? undefined
        : value.hosts === null
        ? null
        : (value.hosts as Array<any>).map(VpcFirewallRuleHostFilterToJSON),
    ports: value.ports,
    protocols:
      value.protocols === undefined
        ? undefined
        : value.protocols === null
        ? null
        : (value.protocols as Array<any>).map(VpcFirewallRuleProtocolToJSON),
  }
}
