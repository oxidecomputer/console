/* tslint:disable */
/* eslint-disable */
/**
 * Oxide Region API
 * API for interacting with the Oxide control plane
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: api@oxide.computer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  IdentityMetadata,
  IdentityMetadataFromJSON,
  IdentityMetadataFromJSONTyped,
  IdentityMetadataToJSON,
  VpcFirewallRuleAction,
  VpcFirewallRuleActionFromJSON,
  VpcFirewallRuleActionFromJSONTyped,
  VpcFirewallRuleActionToJSON,
  VpcFirewallRuleDirection,
  VpcFirewallRuleDirectionFromJSON,
  VpcFirewallRuleDirectionFromJSONTyped,
  VpcFirewallRuleDirectionToJSON,
  VpcFirewallRuleFilter,
  VpcFirewallRuleFilterFromJSON,
  VpcFirewallRuleFilterFromJSONTyped,
  VpcFirewallRuleFilterToJSON,
  VpcFirewallRuleStatus,
  VpcFirewallRuleStatusFromJSON,
  VpcFirewallRuleStatusFromJSONTyped,
  VpcFirewallRuleStatusToJSON,
  VpcFirewallRuleTarget,
  VpcFirewallRuleTargetFromJSON,
  VpcFirewallRuleTargetFromJSONTyped,
  VpcFirewallRuleTargetToJSON,
} from './'

/**
 * A single rule in a VPC firewall
 * @export
 * @interface VpcFirewallRule
 */
export interface VpcFirewallRule {
  /**
   * whether traffic matching the rule should be allowed or dropped
   * @type {VpcFirewallRuleAction}
   * @memberof VpcFirewallRule
   */
  action: VpcFirewallRuleAction
  /**
   * whether this rule is for incoming or outgoing traffic
   * @type {VpcFirewallRuleDirection}
   * @memberof VpcFirewallRule
   */
  direction: VpcFirewallRuleDirection
  /**
   * reductions on the scope of the rule
   * @type {VpcFirewallRuleFilter}
   * @memberof VpcFirewallRule
   */
  filters: VpcFirewallRuleFilter
  /**
   * common identifying metadata
   * @type {IdentityMetadata}
   * @memberof VpcFirewallRule
   */
  identity: IdentityMetadata
  /**
   * the relative priority of this rule
   * @type {number}
   * @memberof VpcFirewallRule
   */
  priority: number
  /**
   * whether this rule is in effect
   * @type {VpcFirewallRuleStatus}
   * @memberof VpcFirewallRule
   */
  status: VpcFirewallRuleStatus
  /**
   * list of sets of instances that the rule applies to
   * @type {Array<VpcFirewallRuleTarget>}
   * @memberof VpcFirewallRule
   */
  targets: Array<VpcFirewallRuleTarget>
}

export function VpcFirewallRuleFromJSON(json: any): VpcFirewallRule {
  return VpcFirewallRuleFromJSONTyped(json, false)
}

export function VpcFirewallRuleFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): VpcFirewallRule {
  if (json === undefined || json === null) {
    return json
  }
  return {
    action: VpcFirewallRuleActionFromJSON(json['action']),
    direction: VpcFirewallRuleDirectionFromJSON(json['direction']),
    filters: VpcFirewallRuleFilterFromJSON(json['filters']),
    identity: IdentityMetadataFromJSON(json['identity']),
    priority: json['priority'],
    status: VpcFirewallRuleStatusFromJSON(json['status']),
    targets: (json['targets'] as Array<any>).map(VpcFirewallRuleTargetFromJSON),
  }
}

export function VpcFirewallRuleToJSON(value?: VpcFirewallRule | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    action: VpcFirewallRuleActionToJSON(value.action),
    direction: VpcFirewallRuleDirectionToJSON(value.direction),
    filters: VpcFirewallRuleFilterToJSON(value.filters),
    identity: IdentityMetadataToJSON(value.identity),
    priority: value.priority,
    status: VpcFirewallRuleStatusToJSON(value.status),
    targets: (value.targets as Array<any>).map(VpcFirewallRuleTargetToJSON),
  }
}
