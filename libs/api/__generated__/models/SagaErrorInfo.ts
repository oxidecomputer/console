/* tslint:disable */
/* eslint-disable */
/**
 * Oxide Region API
 * API for interacting with the Oxide control plane
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: api@oxide.computer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  SagaErrorInfoAnyOf,
  SagaErrorInfoAnyOfFromJSON,
  SagaErrorInfoAnyOfFromJSONTyped,
  SagaErrorInfoAnyOfToJSON,
  SagaErrorInfoAnyOf1,
  SagaErrorInfoAnyOf1FromJSON,
  SagaErrorInfoAnyOf1FromJSONTyped,
  SagaErrorInfoAnyOf1ToJSON,
  SagaErrorInfoAnyOf2,
  SagaErrorInfoAnyOf2FromJSON,
  SagaErrorInfoAnyOf2FromJSONTyped,
  SagaErrorInfoAnyOf2ToJSON,
  SagaErrorInfoAnyOf3,
  SagaErrorInfoAnyOf3FromJSON,
  SagaErrorInfoAnyOf3FromJSONTyped,
  SagaErrorInfoAnyOf3ToJSON,
  SagaErrorInfoAnyOf4,
  SagaErrorInfoAnyOf4FromJSON,
  SagaErrorInfoAnyOf4FromJSONTyped,
  SagaErrorInfoAnyOf4ToJSON,
} from './'

/**
 *
 * @export
 * @interface SagaErrorInfo
 */
export interface SagaErrorInfo {
  /**
   *
   * @type {string}
   * @memberof SagaErrorInfo
   */
  error: SagaErrorInfoErrorEnum
  /**
   *
   * @type {any}
   * @memberof SagaErrorInfo
   */
  sourceError: any | null
  /**
   *
   * @type {string}
   * @memberof SagaErrorInfo
   */
  message: string
}

/**
 * @export
 * @enum {string}
 */
export enum SagaErrorInfoErrorEnum {
  SubsagaCreateFailed = 'subsagaCreateFailed',
}

export function SagaErrorInfoFromJSON(json: any): SagaErrorInfo {
  return SagaErrorInfoFromJSONTyped(json, false)
}

export function SagaErrorInfoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): SagaErrorInfo {
  if (json === undefined || json === null) {
    return json
  }
  return {
    error: json['error'],
    sourceError: json['source_error'],
    message: json['message'],
  }
}

export function SagaErrorInfoToJSON(value?: SagaErrorInfo | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    error: value.error,
    source_error: value.sourceError,
    message: value.message,
  }
}
