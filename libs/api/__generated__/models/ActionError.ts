/* tslint:disable */
/* eslint-disable */
/**
 * Oxide Region API
 * API for interacting with the Oxide control plane
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: api@oxide.computer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  ActionErrorAnyOf,
  ActionErrorAnyOfFromJSON,
  ActionErrorAnyOfFromJSONTyped,
  ActionErrorAnyOfToJSON,
  ActionErrorAnyOf1,
  ActionErrorAnyOf1FromJSON,
  ActionErrorAnyOf1FromJSONTyped,
  ActionErrorAnyOf1ToJSON,
  ActionErrorAnyOf1ActionFailed,
  ActionErrorAnyOf1ActionFailedFromJSON,
  ActionErrorAnyOf1ActionFailedFromJSONTyped,
  ActionErrorAnyOf1ActionFailedToJSON,
  ActionErrorAnyOf2,
  ActionErrorAnyOf2FromJSON,
  ActionErrorAnyOf2FromJSONTyped,
  ActionErrorAnyOf2ToJSON,
  ActionErrorAnyOf2DeserializeFailed,
  ActionErrorAnyOf2DeserializeFailedFromJSON,
  ActionErrorAnyOf2DeserializeFailedFromJSONTyped,
  ActionErrorAnyOf2DeserializeFailedToJSON,
  ActionErrorAnyOf3,
  ActionErrorAnyOf3FromJSON,
  ActionErrorAnyOf3FromJSONTyped,
  ActionErrorAnyOf3ToJSON,
  ActionErrorAnyOf4,
  ActionErrorAnyOf4FromJSON,
  ActionErrorAnyOf4FromJSONTyped,
  ActionErrorAnyOf4ToJSON,
} from './'

/**
 * An error produced by a saga action
 *
 * On failure, actions always return an `ActionError`.  This type can represent a failure from Steno itself or a failure produced by the consumer (e.g., an action whose body fails for some reason).  The various specific errors are documented below.
 *
 * You can use your own error type with [`ActionError`].  As long as it meets the requirements of [`ActionData`], you can wrap your error in an [`ActionError::ActionFailed`] variant using [`ActionError::action_failed()`]. Given an [`ActionError::ActionFailed`] variant, you can get your specific type back out again using [`ActionError::convert()`].
 *
 * Note that the conversion back to your specific error type can fail!  This looks like a downcast, but it's not.  `ActionError`s are typically recorded in the saga log and interpreted later, possibly after a crash and recovery. Whether there was an intervening crash or not, the conversion here deserializes the error from the log into your custom error type.  This won't work if your error type is incompatible with the one that was used to serialize the error in the first place.
 *
 * # Example
 *
 * ```rust use serde::Deserialize; use serde::Serialize; use steno::ActionError;
 *
 * #[derive(Debug, Deserialize, Serialize)] struct MyError { message: String }
 *
 * fn my_func_that_fails() -> Result<(), ActionError> { Err(ActionError::action_failed(MyError { message: "boom!".to_owned() })) }
 *
 * fn handle_error(error: ActionError) { match error.convert::<MyError>() { Ok(my_error) => { eprintln!("my action failed because: {}", my_error.message); } Err(other_error) => { eprintln!( "my action failed because the framework had a problem: {}", other_error.to_string() ); } } } ```
 * @export
 * @interface ActionError
 */
export interface ActionError {
  /**
   *
   * @type {ActionErrorAnyOf1ActionFailed}
   * @memberof ActionError
   */
  actionFailed: ActionErrorAnyOf1ActionFailed
  /**
   *
   * @type {ActionErrorAnyOf2DeserializeFailed}
   * @memberof ActionError
   */
  deserializeFailed: ActionErrorAnyOf2DeserializeFailed
  /**
   *
   * @type {ActionErrorAnyOf2DeserializeFailed}
   * @memberof ActionError
   */
  serializeFailed: ActionErrorAnyOf2DeserializeFailed
  /**
   *
   * @type {ActionErrorAnyOf2DeserializeFailed}
   * @memberof ActionError
   */
  subsagaCreateFailed: ActionErrorAnyOf2DeserializeFailed
}

export function ActionErrorFromJSON(json: any): ActionError {
  return ActionErrorFromJSONTyped(json, false)
}

export function ActionErrorFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ActionError {
  if (json === undefined || json === null) {
    return json
  }
  return {
    actionFailed: ActionErrorAnyOf1ActionFailedFromJSON(json['ActionFailed']),
    deserializeFailed: ActionErrorAnyOf2DeserializeFailedFromJSON(
      json['DeserializeFailed']
    ),
    serializeFailed: ActionErrorAnyOf2DeserializeFailedFromJSON(
      json['SerializeFailed']
    ),
    subsagaCreateFailed: ActionErrorAnyOf2DeserializeFailedFromJSON(
      json['SubsagaCreateFailed']
    ),
  }
}

export function ActionErrorToJSON(value?: ActionError | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    ActionFailed: ActionErrorAnyOf1ActionFailedToJSON(value.actionFailed),
    DeserializeFailed: ActionErrorAnyOf2DeserializeFailedToJSON(
      value.deserializeFailed
    ),
    SerializeFailed: ActionErrorAnyOf2DeserializeFailedToJSON(
      value.serializeFailed
    ),
    SubsagaCreateFailed: ActionErrorAnyOf2DeserializeFailedToJSON(
      value.subsagaCreateFailed
    ),
  }
}
