/* tslint:disable */
/* eslint-disable */
/**
 * Oxide Region API
 * API for interacting with the Oxide control plane
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: api@oxide.computer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  ApiDiskAttachment,
  ApiDiskAttachmentFromJSON,
  ApiDiskAttachmentToJSON,
  ApiDiskAttachment1,
  ApiDiskAttachment1FromJSON,
  ApiDiskAttachment1ToJSON,
  ApiDiskCreateParams,
  ApiDiskCreateParamsFromJSON,
  ApiDiskCreateParamsToJSON,
  ApiDiskView1,
  ApiDiskView1FromJSON,
  ApiDiskView1ToJSON,
  ApiIdSortMode,
  ApiIdSortModeFromJSON,
  ApiIdSortModeToJSON,
  ApiInstanceCreateParams,
  ApiInstanceCreateParamsFromJSON,
  ApiInstanceCreateParamsToJSON,
  ApiInstanceView1,
  ApiInstanceView1FromJSON,
  ApiInstanceView1ToJSON,
  ApiNameOrIdSortMode,
  ApiNameOrIdSortModeFromJSON,
  ApiNameOrIdSortModeToJSON,
  ApiNameSortMode,
  ApiNameSortModeFromJSON,
  ApiNameSortModeToJSON,
  ApiProjectCreateParams,
  ApiProjectCreateParamsFromJSON,
  ApiProjectCreateParamsToJSON,
  ApiProjectUpdateParams,
  ApiProjectUpdateParamsFromJSON,
  ApiProjectUpdateParamsToJSON,
  ApiProjectView1,
  ApiProjectView1FromJSON,
  ApiProjectView1ToJSON,
  ApiRackView1,
  ApiRackView1FromJSON,
  ApiRackView1ToJSON,
  ApiSledView1,
  ApiSledView1FromJSON,
  ApiSledView1ToJSON,
  ResultsPageForApiDiskView,
  ResultsPageForApiDiskViewFromJSON,
  ResultsPageForApiDiskViewToJSON,
  ResultsPageForApiInstanceView,
  ResultsPageForApiInstanceViewFromJSON,
  ResultsPageForApiInstanceViewToJSON,
  ResultsPageForApiProjectView,
  ResultsPageForApiProjectViewFromJSON,
  ResultsPageForApiProjectViewToJSON,
  ResultsPageForApiRackView,
  ResultsPageForApiRackViewFromJSON,
  ResultsPageForApiRackViewToJSON,
  ResultsPageForApiSledView,
  ResultsPageForApiSledViewFromJSON,
  ResultsPageForApiSledViewToJSON,
} from '../models'

export interface ApiHardwareRacksGetRequest {
  limit?: number
  pageToken?: string
  sortBy?: ApiIdSortMode
}

export interface ApiHardwareRacksGetRackRequest {
  rackId: string
}

export interface ApiHardwareSledsGetRequest {
  limit?: number
  pageToken?: string
  sortBy?: ApiIdSortMode
}

export interface ApiHardwareSledsGetSledRequest {
  sledId: string
}

export interface ApiInstanceDisksDeleteDiskRequest {
  diskName: string
  instanceName: string
  projectName: string
}

export interface ApiInstanceDisksGetRequest {
  instanceName: string
  projectName: string
}

export interface ApiInstanceDisksGetDiskRequest {
  diskName: string
  instanceName: string
  projectName: string
}

export interface ApiInstanceDisksPutDiskRequest {
  diskName: string
  instanceName: string
  projectName: string
}

export interface ApiProjectDisksDeleteDiskRequest {
  diskName: string
  projectName: string
}

export interface ApiProjectDisksGetRequest {
  projectName: string
  limit?: number
  pageToken?: string
  sortBy?: ApiNameSortMode
}

export interface ApiProjectDisksGetDiskRequest {
  diskName: string
  projectName: string
}

export interface ApiProjectDisksPostRequest {
  projectName: string
  apiDiskCreateParams: ApiDiskCreateParams
}

export interface ApiProjectInstancesDeleteInstanceRequest {
  instanceName: string
  projectName: string
}

export interface ApiProjectInstancesGetRequest {
  projectName: string
  limit?: number
  pageToken?: string
  sortBy?: ApiNameSortMode
}

export interface ApiProjectInstancesGetInstanceRequest {
  instanceName: string
  projectName: string
}

export interface ApiProjectInstancesInstanceRebootRequest {
  instanceName: string
  projectName: string
}

export interface ApiProjectInstancesInstanceStartRequest {
  instanceName: string
  projectName: string
}

export interface ApiProjectInstancesInstanceStopRequest {
  instanceName: string
  projectName: string
}

export interface ApiProjectInstancesPostRequest {
  projectName: string
  apiInstanceCreateParams: ApiInstanceCreateParams
}

export interface ApiProjectsDeleteProjectRequest {
  projectName: string
}

export interface ApiProjectsGetRequest {
  limit?: number
  pageToken?: string
  sortBy?: ApiNameOrIdSortMode
}

export interface ApiProjectsGetProjectRequest {
  projectName: string
}

export interface ApiProjectsPostRequest {
  apiProjectCreateParams: ApiProjectCreateParams
}

export interface ApiProjectsPutProjectRequest {
  projectName: string
  apiProjectUpdateParams: ApiProjectUpdateParams
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * List racks in the system.
   */
  async apiHardwareRacksGetRaw(
    requestParameters: ApiHardwareRacksGetRequest
  ): Promise<runtime.ApiResponse<ResultsPageForApiRackView>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/hardware/racks`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResultsPageForApiRackViewFromJSON(jsonValue)
    )
  }

  /**
   * List racks in the system.
   */
  async apiHardwareRacksGet(
    requestParameters: ApiHardwareRacksGetRequest
  ): Promise<ResultsPageForApiRackView> {
    const response = await this.apiHardwareRacksGetRaw(requestParameters)
    return await response.value()
  }

  /**
   * Fetch information about a particular rack.
   */
  async apiHardwareRacksGetRackRaw(
    requestParameters: ApiHardwareRacksGetRackRequest
  ): Promise<runtime.ApiResponse<ApiRackView1>> {
    if (
      requestParameters.rackId === null ||
      requestParameters.rackId === undefined
    ) {
      throw new runtime.RequiredError(
        'rackId',
        'Required parameter requestParameters.rackId was null or undefined when calling apiHardwareRacksGetRack.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/hardware/racks/{rack_id}`.replace(
        `{${'rack_id'}}`,
        encodeURIComponent(String(requestParameters.rackId))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiRackView1FromJSON(jsonValue)
    )
  }

  /**
   * Fetch information about a particular rack.
   */
  async apiHardwareRacksGetRack(
    requestParameters: ApiHardwareRacksGetRackRequest
  ): Promise<ApiRackView1> {
    const response = await this.apiHardwareRacksGetRackRaw(requestParameters)
    return await response.value()
  }

  /**
   * List sleds in the system.
   */
  async apiHardwareSledsGetRaw(
    requestParameters: ApiHardwareSledsGetRequest
  ): Promise<runtime.ApiResponse<ResultsPageForApiSledView>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/hardware/sleds`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResultsPageForApiSledViewFromJSON(jsonValue)
    )
  }

  /**
   * List sleds in the system.
   */
  async apiHardwareSledsGet(
    requestParameters: ApiHardwareSledsGetRequest
  ): Promise<ResultsPageForApiSledView> {
    const response = await this.apiHardwareSledsGetRaw(requestParameters)
    return await response.value()
  }

  /**
   * Fetch information about a sled in the system.
   */
  async apiHardwareSledsGetSledRaw(
    requestParameters: ApiHardwareSledsGetSledRequest
  ): Promise<runtime.ApiResponse<ApiSledView1>> {
    if (
      requestParameters.sledId === null ||
      requestParameters.sledId === undefined
    ) {
      throw new runtime.RequiredError(
        'sledId',
        'Required parameter requestParameters.sledId was null or undefined when calling apiHardwareSledsGetSled.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/hardware/sleds/{sled_id}`.replace(
        `{${'sled_id'}}`,
        encodeURIComponent(String(requestParameters.sledId))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiSledView1FromJSON(jsonValue)
    )
  }

  /**
   * Fetch information about a sled in the system.
   */
  async apiHardwareSledsGetSled(
    requestParameters: ApiHardwareSledsGetSledRequest
  ): Promise<ApiSledView1> {
    const response = await this.apiHardwareSledsGetSledRaw(requestParameters)
    return await response.value()
  }

  /**
   * Detach a disk from this instance.
   */
  async apiInstanceDisksDeleteDiskRaw(
    requestParameters: ApiInstanceDisksDeleteDiskRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling apiInstanceDisksDeleteDisk.'
      )
    }

    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiInstanceDisksDeleteDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiInstanceDisksDeleteDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}/disks/{disk_name}`
        .replace(
          `{${'disk_name'}}`,
          encodeURIComponent(String(requestParameters.diskName))
        )
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Detach a disk from this instance.
   */
  async apiInstanceDisksDeleteDisk(
    requestParameters: ApiInstanceDisksDeleteDiskRequest
  ): Promise<void> {
    await this.apiInstanceDisksDeleteDiskRaw(requestParameters)
  }

  /**
   * List disks attached to this instance.
   */
  async apiInstanceDisksGetRaw(
    requestParameters: ApiInstanceDisksGetRequest
  ): Promise<runtime.ApiResponse<Array<ApiDiskAttachment>>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiInstanceDisksGet.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiInstanceDisksGet.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}/disks`
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ApiDiskAttachmentFromJSON)
    )
  }

  /**
   * List disks attached to this instance.
   */
  async apiInstanceDisksGet(
    requestParameters: ApiInstanceDisksGetRequest
  ): Promise<Array<ApiDiskAttachment>> {
    const response = await this.apiInstanceDisksGetRaw(requestParameters)
    return await response.value()
  }

  /**
   * Fetch a description of the attachment of this disk to this instance.
   */
  async apiInstanceDisksGetDiskRaw(
    requestParameters: ApiInstanceDisksGetDiskRequest
  ): Promise<runtime.ApiResponse<ApiDiskAttachment1>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling apiInstanceDisksGetDisk.'
      )
    }

    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiInstanceDisksGetDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiInstanceDisksGetDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}/disks/{disk_name}`
        .replace(
          `{${'disk_name'}}`,
          encodeURIComponent(String(requestParameters.diskName))
        )
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiDiskAttachment1FromJSON(jsonValue)
    )
  }

  /**
   * Fetch a description of the attachment of this disk to this instance.
   */
  async apiInstanceDisksGetDisk(
    requestParameters: ApiInstanceDisksGetDiskRequest
  ): Promise<ApiDiskAttachment1> {
    const response = await this.apiInstanceDisksGetDiskRaw(requestParameters)
    return await response.value()
  }

  /**
   * Attach a disk to this instance.
   */
  async apiInstanceDisksPutDiskRaw(
    requestParameters: ApiInstanceDisksPutDiskRequest
  ): Promise<runtime.ApiResponse<ApiDiskAttachment1>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling apiInstanceDisksPutDisk.'
      )
    }

    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiInstanceDisksPutDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiInstanceDisksPutDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}/disks/{disk_name}`
        .replace(
          `{${'disk_name'}}`,
          encodeURIComponent(String(requestParameters.diskName))
        )
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiDiskAttachment1FromJSON(jsonValue)
    )
  }

  /**
   * Attach a disk to this instance.
   */
  async apiInstanceDisksPutDisk(
    requestParameters: ApiInstanceDisksPutDiskRequest
  ): Promise<ApiDiskAttachment1> {
    const response = await this.apiInstanceDisksPutDiskRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete a disk from a project.
   */
  async apiProjectDisksDeleteDiskRaw(
    requestParameters: ApiProjectDisksDeleteDiskRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling apiProjectDisksDeleteDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectDisksDeleteDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/disks/{disk_name}`
        .replace(
          `{${'disk_name'}}`,
          encodeURIComponent(String(requestParameters.diskName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a disk from a project.
   */
  async apiProjectDisksDeleteDisk(
    requestParameters: ApiProjectDisksDeleteDiskRequest
  ): Promise<void> {
    await this.apiProjectDisksDeleteDiskRaw(requestParameters)
  }

  /**
   * List disks in a project.
   */
  async apiProjectDisksGetRaw(
    requestParameters: ApiProjectDisksGetRequest
  ): Promise<runtime.ApiResponse<ResultsPageForApiDiskView>> {
    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectDisksGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/disks`.replace(
        `{${'project_name'}}`,
        encodeURIComponent(String(requestParameters.projectName))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResultsPageForApiDiskViewFromJSON(jsonValue)
    )
  }

  /**
   * List disks in a project.
   */
  async apiProjectDisksGet(
    requestParameters: ApiProjectDisksGetRequest
  ): Promise<ResultsPageForApiDiskView> {
    const response = await this.apiProjectDisksGetRaw(requestParameters)
    return await response.value()
  }

  /**
   * Fetch a single disk in a project.
   */
  async apiProjectDisksGetDiskRaw(
    requestParameters: ApiProjectDisksGetDiskRequest
  ): Promise<runtime.ApiResponse<ApiDiskView1>> {
    if (
      requestParameters.diskName === null ||
      requestParameters.diskName === undefined
    ) {
      throw new runtime.RequiredError(
        'diskName',
        'Required parameter requestParameters.diskName was null or undefined when calling apiProjectDisksGetDisk.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectDisksGetDisk.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/disks/{disk_name}`
        .replace(
          `{${'disk_name'}}`,
          encodeURIComponent(String(requestParameters.diskName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiDiskView1FromJSON(jsonValue)
    )
  }

  /**
   * Fetch a single disk in a project.
   */
  async apiProjectDisksGetDisk(
    requestParameters: ApiProjectDisksGetDiskRequest
  ): Promise<ApiDiskView1> {
    const response = await this.apiProjectDisksGetDiskRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create a disk in a project.  * TODO-correctness See note about instance create.  This should be async.
   */
  async apiProjectDisksPostRaw(
    requestParameters: ApiProjectDisksPostRequest
  ): Promise<runtime.ApiResponse<ApiDiskView1>> {
    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectDisksPost.'
      )
    }

    if (
      requestParameters.apiDiskCreateParams === null ||
      requestParameters.apiDiskCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'apiDiskCreateParams',
        'Required parameter requestParameters.apiDiskCreateParams was null or undefined when calling apiProjectDisksPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/projects/{project_name}/disks`.replace(
        `{${'project_name'}}`,
        encodeURIComponent(String(requestParameters.projectName))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ApiDiskCreateParamsToJSON(requestParameters.apiDiskCreateParams),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiDiskView1FromJSON(jsonValue)
    )
  }

  /**
   * Create a disk in a project.  * TODO-correctness See note about instance create.  This should be async.
   */
  async apiProjectDisksPost(
    requestParameters: ApiProjectDisksPostRequest
  ): Promise<ApiDiskView1> {
    const response = await this.apiProjectDisksPostRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete an instance from a project.
   */
  async apiProjectInstancesDeleteInstanceRaw(
    requestParameters: ApiProjectInstancesDeleteInstanceRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiProjectInstancesDeleteInstance.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectInstancesDeleteInstance.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}`
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete an instance from a project.
   */
  async apiProjectInstancesDeleteInstance(
    requestParameters: ApiProjectInstancesDeleteInstanceRequest
  ): Promise<void> {
    await this.apiProjectInstancesDeleteInstanceRaw(requestParameters)
  }

  /**
   * List instances in a project.
   */
  async apiProjectInstancesGetRaw(
    requestParameters: ApiProjectInstancesGetRequest
  ): Promise<runtime.ApiResponse<ResultsPageForApiInstanceView>> {
    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectInstancesGet.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances`.replace(
        `{${'project_name'}}`,
        encodeURIComponent(String(requestParameters.projectName))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResultsPageForApiInstanceViewFromJSON(jsonValue)
    )
  }

  /**
   * List instances in a project.
   */
  async apiProjectInstancesGet(
    requestParameters: ApiProjectInstancesGetRequest
  ): Promise<ResultsPageForApiInstanceView> {
    const response = await this.apiProjectInstancesGetRaw(requestParameters)
    return await response.value()
  }

  /**
   * Get an instance in a project.
   */
  async apiProjectInstancesGetInstanceRaw(
    requestParameters: ApiProjectInstancesGetInstanceRequest
  ): Promise<runtime.ApiResponse<ApiInstanceView1>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiProjectInstancesGetInstance.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectInstancesGetInstance.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}`
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiInstanceView1FromJSON(jsonValue)
    )
  }

  /**
   * Get an instance in a project.
   */
  async apiProjectInstancesGetInstance(
    requestParameters: ApiProjectInstancesGetInstanceRequest
  ): Promise<ApiInstanceView1> {
    const response = await this.apiProjectInstancesGetInstanceRaw(
      requestParameters
    )
    return await response.value()
  }

  /**
   * Reboot an instance.
   */
  async apiProjectInstancesInstanceRebootRaw(
    requestParameters: ApiProjectInstancesInstanceRebootRequest
  ): Promise<runtime.ApiResponse<ApiInstanceView1>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiProjectInstancesInstanceReboot.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectInstancesInstanceReboot.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}/reboot`
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiInstanceView1FromJSON(jsonValue)
    )
  }

  /**
   * Reboot an instance.
   */
  async apiProjectInstancesInstanceReboot(
    requestParameters: ApiProjectInstancesInstanceRebootRequest
  ): Promise<ApiInstanceView1> {
    const response = await this.apiProjectInstancesInstanceRebootRaw(
      requestParameters
    )
    return await response.value()
  }

  /**
   * Boot an instance.
   */
  async apiProjectInstancesInstanceStartRaw(
    requestParameters: ApiProjectInstancesInstanceStartRequest
  ): Promise<runtime.ApiResponse<ApiInstanceView1>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiProjectInstancesInstanceStart.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectInstancesInstanceStart.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}/start`
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiInstanceView1FromJSON(jsonValue)
    )
  }

  /**
   * Boot an instance.
   */
  async apiProjectInstancesInstanceStart(
    requestParameters: ApiProjectInstancesInstanceStartRequest
  ): Promise<ApiInstanceView1> {
    const response = await this.apiProjectInstancesInstanceStartRaw(
      requestParameters
    )
    return await response.value()
  }

  /**
   * Halt an instance.
   */
  async apiProjectInstancesInstanceStopRaw(
    requestParameters: ApiProjectInstancesInstanceStopRequest
  ): Promise<runtime.ApiResponse<ApiInstanceView1>> {
    if (
      requestParameters.instanceName === null ||
      requestParameters.instanceName === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceName',
        'Required parameter requestParameters.instanceName was null or undefined when calling apiProjectInstancesInstanceStop.'
      )
    }

    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectInstancesInstanceStop.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}/instances/{instance_name}/stop`
        .replace(
          `{${'instance_name'}}`,
          encodeURIComponent(String(requestParameters.instanceName))
        )
        .replace(
          `{${'project_name'}}`,
          encodeURIComponent(String(requestParameters.projectName))
        ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiInstanceView1FromJSON(jsonValue)
    )
  }

  /**
   * Halt an instance.
   */
  async apiProjectInstancesInstanceStop(
    requestParameters: ApiProjectInstancesInstanceStopRequest
  ): Promise<ApiInstanceView1> {
    const response = await this.apiProjectInstancesInstanceStopRaw(
      requestParameters
    )
    return await response.value()
  }

  /**
   * Create an instance in a project.  * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it\'s just not booted yet.  Maybe the boot operation is what\'s a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there\'s no actual resource created?
   */
  async apiProjectInstancesPostRaw(
    requestParameters: ApiProjectInstancesPostRequest
  ): Promise<runtime.ApiResponse<ApiInstanceView1>> {
    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectInstancesPost.'
      )
    }

    if (
      requestParameters.apiInstanceCreateParams === null ||
      requestParameters.apiInstanceCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'apiInstanceCreateParams',
        'Required parameter requestParameters.apiInstanceCreateParams was null or undefined when calling apiProjectInstancesPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/projects/{project_name}/instances`.replace(
        `{${'project_name'}}`,
        encodeURIComponent(String(requestParameters.projectName))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ApiInstanceCreateParamsToJSON(
        requestParameters.apiInstanceCreateParams
      ),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiInstanceView1FromJSON(jsonValue)
    )
  }

  /**
   * Create an instance in a project.  * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it\'s just not booted yet.  Maybe the boot operation is what\'s a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there\'s no actual resource created?
   */
  async apiProjectInstancesPost(
    requestParameters: ApiProjectInstancesPostRequest
  ): Promise<ApiInstanceView1> {
    const response = await this.apiProjectInstancesPostRaw(requestParameters)
    return await response.value()
  }

  /**
   * Delete a specific project.
   */
  async apiProjectsDeleteProjectRaw(
    requestParameters: ApiProjectsDeleteProjectRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectsDeleteProject.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}`.replace(
        `{${'project_name'}}`,
        encodeURIComponent(String(requestParameters.projectName))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a specific project.
   */
  async apiProjectsDeleteProject(
    requestParameters: ApiProjectsDeleteProjectRequest
  ): Promise<void> {
    await this.apiProjectsDeleteProjectRaw(requestParameters)
  }

  /**
   * List all projects.
   */
  async apiProjectsGetRaw(
    requestParameters: ApiProjectsGetRequest
  ): Promise<runtime.ApiResponse<ResultsPageForApiProjectView>> {
    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.pageToken !== undefined) {
      queryParameters['page_token'] = requestParameters.pageToken
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sort_by'] = requestParameters.sortBy
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResultsPageForApiProjectViewFromJSON(jsonValue)
    )
  }

  /**
   * List all projects.
   */
  async apiProjectsGet(
    requestParameters: ApiProjectsGetRequest
  ): Promise<ResultsPageForApiProjectView> {
    const response = await this.apiProjectsGetRaw(requestParameters)
    return await response.value()
  }

  /**
   * Fetch a specific project
   */
  async apiProjectsGetProjectRaw(
    requestParameters: ApiProjectsGetProjectRequest
  ): Promise<runtime.ApiResponse<ApiProjectView1>> {
    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectsGetProject.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/projects/{project_name}`.replace(
        `{${'project_name'}}`,
        encodeURIComponent(String(requestParameters.projectName))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiProjectView1FromJSON(jsonValue)
    )
  }

  /**
   * Fetch a specific project
   */
  async apiProjectsGetProject(
    requestParameters: ApiProjectsGetProjectRequest
  ): Promise<ApiProjectView1> {
    const response = await this.apiProjectsGetProjectRaw(requestParameters)
    return await response.value()
  }

  /**
   * Create a new project.
   */
  async apiProjectsPostRaw(
    requestParameters: ApiProjectsPostRequest
  ): Promise<runtime.ApiResponse<ApiProjectView1>> {
    if (
      requestParameters.apiProjectCreateParams === null ||
      requestParameters.apiProjectCreateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'apiProjectCreateParams',
        'Required parameter requestParameters.apiProjectCreateParams was null or undefined when calling apiProjectsPost.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/projects`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ApiProjectCreateParamsToJSON(
        requestParameters.apiProjectCreateParams
      ),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiProjectView1FromJSON(jsonValue)
    )
  }

  /**
   * Create a new project.
   */
  async apiProjectsPost(
    requestParameters: ApiProjectsPostRequest
  ): Promise<ApiProjectView1> {
    const response = await this.apiProjectsPostRaw(requestParameters)
    return await response.value()
  }

  /**
   * Update a specific project.  * TODO-correctness: Is it valid for PUT to accept application/json that\'s a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.
   */
  async apiProjectsPutProjectRaw(
    requestParameters: ApiProjectsPutProjectRequest
  ): Promise<runtime.ApiResponse<ApiProjectView1>> {
    if (
      requestParameters.projectName === null ||
      requestParameters.projectName === undefined
    ) {
      throw new runtime.RequiredError(
        'projectName',
        'Required parameter requestParameters.projectName was null or undefined when calling apiProjectsPutProject.'
      )
    }

    if (
      requestParameters.apiProjectUpdateParams === null ||
      requestParameters.apiProjectUpdateParams === undefined
    ) {
      throw new runtime.RequiredError(
        'apiProjectUpdateParams',
        'Required parameter requestParameters.apiProjectUpdateParams was null or undefined when calling apiProjectsPutProject.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/projects/{project_name}`.replace(
        `{${'project_name'}}`,
        encodeURIComponent(String(requestParameters.projectName))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: ApiProjectUpdateParamsToJSON(
        requestParameters.apiProjectUpdateParams
      ),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApiProjectView1FromJSON(jsonValue)
    )
  }

  /**
   * Update a specific project.  * TODO-correctness: Is it valid for PUT to accept application/json that\'s a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.
   */
  async apiProjectsPutProject(
    requestParameters: ApiProjectsPutProjectRequest
  ): Promise<ApiProjectView1> {
    const response = await this.apiProjectsPutProjectRaw(requestParameters)
    return await response.value()
  }
}
